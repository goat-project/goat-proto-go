// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goat.proto

package goat_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VmRecord struct {
	VmUuid               string                `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	SiteName             string                `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	CloudComputeService  *wrappers.StringValue `protobuf:"bytes,3,opt,name=cloud_compute_service,json=cloudComputeService,proto3" json:"cloud_compute_service,omitempty"`
	MachineName          string                `protobuf:"bytes,4,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"`
	LocalUserId          *wrappers.StringValue `protobuf:"bytes,5,opt,name=local_user_id,json=localUserId,proto3" json:"local_user_id,omitempty"`
	LocalGroupId         *wrappers.StringValue `protobuf:"bytes,6,opt,name=local_group_id,json=localGroupId,proto3" json:"local_group_id,omitempty"`
	GlobalUserName       *wrappers.StringValue `protobuf:"bytes,7,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                 *wrappers.StringValue `protobuf:"bytes,8,opt,name=fqan,proto3" json:"fqan,omitempty"`
	Status               *wrappers.StringValue `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	StartTime            *timestamp.Timestamp  `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp  `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SuspendDuration      *duration.Duration    `protobuf:"bytes,12,opt,name=suspend_duration,json=suspendDuration,proto3" json:"suspend_duration,omitempty"`
	WallDuration         *duration.Duration    `protobuf:"bytes,13,opt,name=wall_duration,json=wallDuration,proto3" json:"wall_duration,omitempty"`
	CpuDuration          *duration.Duration    `protobuf:"bytes,14,opt,name=cpu_duration,json=cpuDuration,proto3" json:"cpu_duration,omitempty"`
	CpuCount             uint32                `protobuf:"varint,15,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	NetworkType          *wrappers.StringValue `protobuf:"bytes,16,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	NetworkInbound       *wrappers.UInt64Value `protobuf:"bytes,17,opt,name=network_inbound,json=networkInbound,proto3" json:"network_inbound,omitempty"`
	NetworkOutbound      *wrappers.UInt64Value `protobuf:"bytes,18,opt,name=network_outbound,json=networkOutbound,proto3" json:"network_outbound,omitempty"`
	PublicIpCount        *wrappers.UInt64Value `protobuf:"bytes,19,opt,name=public_ip_count,json=publicIpCount,proto3" json:"public_ip_count,omitempty"`
	Memory               *wrappers.UInt64Value `protobuf:"bytes,20,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk                 *wrappers.UInt64Value `protobuf:"bytes,21,opt,name=disk,proto3" json:"disk,omitempty"`
	BenchmarkType        *wrappers.StringValue `protobuf:"bytes,22,opt,name=benchmark_type,json=benchmarkType,proto3" json:"benchmark_type,omitempty"`
	Benchmark            *wrappers.FloatValue  `protobuf:"bytes,23,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	StorageRecordId      *wrappers.StringValue `protobuf:"bytes,24,opt,name=storage_record_id,json=storageRecordId,proto3" json:"storage_record_id,omitempty"`
	ImageId              *wrappers.StringValue `protobuf:"bytes,25,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	CloudType            *wrappers.StringValue `protobuf:"bytes,26,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VmRecord) Reset()         { *m = VmRecord{} }
func (m *VmRecord) String() string { return proto.CompactTextString(m) }
func (*VmRecord) ProtoMessage()    {}
func (*VmRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_9f5515b6c2eb5223, []int{0}
}
func (m *VmRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRecord.Unmarshal(m, b)
}
func (m *VmRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRecord.Marshal(b, m, deterministic)
}
func (dst *VmRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRecord.Merge(dst, src)
}
func (m *VmRecord) XXX_Size() int {
	return xxx_messageInfo_VmRecord.Size(m)
}
func (m *VmRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VmRecord proto.InternalMessageInfo

func (m *VmRecord) GetVmUuid() string {
	if m != nil {
		return m.VmUuid
	}
	return ""
}

func (m *VmRecord) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *VmRecord) GetCloudComputeService() *wrappers.StringValue {
	if m != nil {
		return m.CloudComputeService
	}
	return nil
}

func (m *VmRecord) GetMachineName() string {
	if m != nil {
		return m.MachineName
	}
	return ""
}

func (m *VmRecord) GetLocalUserId() *wrappers.StringValue {
	if m != nil {
		return m.LocalUserId
	}
	return nil
}

func (m *VmRecord) GetLocalGroupId() *wrappers.StringValue {
	if m != nil {
		return m.LocalGroupId
	}
	return nil
}

func (m *VmRecord) GetGlobalUserName() *wrappers.StringValue {
	if m != nil {
		return m.GlobalUserName
	}
	return nil
}

func (m *VmRecord) GetFqan() *wrappers.StringValue {
	if m != nil {
		return m.Fqan
	}
	return nil
}

func (m *VmRecord) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VmRecord) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *VmRecord) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *VmRecord) GetSuspendDuration() *duration.Duration {
	if m != nil {
		return m.SuspendDuration
	}
	return nil
}

func (m *VmRecord) GetWallDuration() *duration.Duration {
	if m != nil {
		return m.WallDuration
	}
	return nil
}

func (m *VmRecord) GetCpuDuration() *duration.Duration {
	if m != nil {
		return m.CpuDuration
	}
	return nil
}

func (m *VmRecord) GetCpuCount() uint32 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *VmRecord) GetNetworkType() *wrappers.StringValue {
	if m != nil {
		return m.NetworkType
	}
	return nil
}

func (m *VmRecord) GetNetworkInbound() *wrappers.UInt64Value {
	if m != nil {
		return m.NetworkInbound
	}
	return nil
}

func (m *VmRecord) GetNetworkOutbound() *wrappers.UInt64Value {
	if m != nil {
		return m.NetworkOutbound
	}
	return nil
}

func (m *VmRecord) GetPublicIpCount() *wrappers.UInt64Value {
	if m != nil {
		return m.PublicIpCount
	}
	return nil
}

func (m *VmRecord) GetMemory() *wrappers.UInt64Value {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *VmRecord) GetDisk() *wrappers.UInt64Value {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *VmRecord) GetBenchmarkType() *wrappers.StringValue {
	if m != nil {
		return m.BenchmarkType
	}
	return nil
}

func (m *VmRecord) GetBenchmark() *wrappers.FloatValue {
	if m != nil {
		return m.Benchmark
	}
	return nil
}

func (m *VmRecord) GetStorageRecordId() *wrappers.StringValue {
	if m != nil {
		return m.StorageRecordId
	}
	return nil
}

func (m *VmRecord) GetImageId() *wrappers.StringValue {
	if m != nil {
		return m.ImageId
	}
	return nil
}

func (m *VmRecord) GetCloudType() *wrappers.StringValue {
	if m != nil {
		return m.CloudType
	}
	return nil
}

type IpRecord struct {
	MeasurementTime      *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=measurement_time,json=measurementTime,proto3" json:"measurement_time,omitempty"`
	SiteName             string                `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	CloudComputeService  *wrappers.StringValue `protobuf:"bytes,3,opt,name=cloud_compute_service,json=cloudComputeService,proto3" json:"cloud_compute_service,omitempty"`
	CloudType            string                `protobuf:"bytes,4,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	LocalUser            string                `protobuf:"bytes,5,opt,name=local_user,json=localUser,proto3" json:"local_user,omitempty"`
	LocalGroup           string                `protobuf:"bytes,6,opt,name=local_group,json=localGroup,proto3" json:"local_group,omitempty"`
	GlobalUserName       string                `protobuf:"bytes,7,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                 string                `protobuf:"bytes,8,opt,name=fqan,proto3" json:"fqan,omitempty"`
	IpType               string                `protobuf:"bytes,9,opt,name=ip_type,json=ipType,proto3" json:"ip_type,omitempty"`
	IpCount              uint32                `protobuf:"varint,10,opt,name=ip_count,json=ipCount,proto3" json:"ip_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IpRecord) Reset()         { *m = IpRecord{} }
func (m *IpRecord) String() string { return proto.CompactTextString(m) }
func (*IpRecord) ProtoMessage()    {}
func (*IpRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_9f5515b6c2eb5223, []int{1}
}
func (m *IpRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpRecord.Unmarshal(m, b)
}
func (m *IpRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpRecord.Marshal(b, m, deterministic)
}
func (dst *IpRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpRecord.Merge(dst, src)
}
func (m *IpRecord) XXX_Size() int {
	return xxx_messageInfo_IpRecord.Size(m)
}
func (m *IpRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_IpRecord.DiscardUnknown(m)
}

var xxx_messageInfo_IpRecord proto.InternalMessageInfo

func (m *IpRecord) GetMeasurementTime() *timestamp.Timestamp {
	if m != nil {
		return m.MeasurementTime
	}
	return nil
}

func (m *IpRecord) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *IpRecord) GetCloudComputeService() *wrappers.StringValue {
	if m != nil {
		return m.CloudComputeService
	}
	return nil
}

func (m *IpRecord) GetCloudType() string {
	if m != nil {
		return m.CloudType
	}
	return ""
}

func (m *IpRecord) GetLocalUser() string {
	if m != nil {
		return m.LocalUser
	}
	return ""
}

func (m *IpRecord) GetLocalGroup() string {
	if m != nil {
		return m.LocalGroup
	}
	return ""
}

func (m *IpRecord) GetGlobalUserName() string {
	if m != nil {
		return m.GlobalUserName
	}
	return ""
}

func (m *IpRecord) GetFqan() string {
	if m != nil {
		return m.Fqan
	}
	return ""
}

func (m *IpRecord) GetIpType() string {
	if m != nil {
		return m.IpType
	}
	return ""
}

func (m *IpRecord) GetIpCount() uint32 {
	if m != nil {
		return m.IpCount
	}
	return 0
}

type StorageRecord struct {
	RecordID                  string                `protobuf:"bytes,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	CreateTime                *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StorageSystem             string                `protobuf:"bytes,3,opt,name=storage_system,json=storageSystem,proto3" json:"storage_system,omitempty"`
	Site                      *wrappers.StringValue `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	StorageShare              *wrappers.StringValue `protobuf:"bytes,5,opt,name=storage_share,json=storageShare,proto3" json:"storage_share,omitempty"`
	StorageMedia              *wrappers.StringValue `protobuf:"bytes,6,opt,name=storage_media,json=storageMedia,proto3" json:"storage_media,omitempty"`
	StorageClass              *wrappers.StringValue `protobuf:"bytes,7,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	FileCount                 *wrappers.StringValue `protobuf:"bytes,8,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	DirectoryPath             *wrappers.StringValue `protobuf:"bytes,9,opt,name=directory_path,json=directoryPath,proto3" json:"directory_path,omitempty"`
	LocalUser                 *wrappers.StringValue `protobuf:"bytes,10,opt,name=local_user,json=localUser,proto3" json:"local_user,omitempty"`
	LocalGroup                *wrappers.StringValue `protobuf:"bytes,11,opt,name=local_group,json=localGroup,proto3" json:"local_group,omitempty"`
	UserIdentity              *wrappers.StringValue `protobuf:"bytes,12,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	Group                     *wrappers.StringValue `protobuf:"bytes,13,opt,name=group,proto3" json:"group,omitempty"`
	GroupAttribute            *wrappers.StringValue `protobuf:"bytes,14,opt,name=group_attribute,json=groupAttribute,proto3" json:"group_attribute,omitempty"`
	GroupAttributeType        *wrappers.StringValue `protobuf:"bytes,15,opt,name=group_attribute_type,json=groupAttributeType,proto3" json:"group_attribute_type,omitempty"`
	StartTime                 *timestamp.Timestamp  `protobuf:"bytes,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                   *timestamp.Timestamp  `protobuf:"bytes,17,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ResourceCapacityUsed      uint64                `protobuf:"varint,18,opt,name=resource_capacity_used,json=resourceCapacityUsed,proto3" json:"resource_capacity_used,omitempty"`
	LogicalCapacityUsed       *wrappers.UInt64Value `protobuf:"bytes,19,opt,name=logical_capacity_used,json=logicalCapacityUsed,proto3" json:"logical_capacity_used,omitempty"`
	ResourceCapacityAllocated *wrappers.UInt64Value `protobuf:"bytes,20,opt,name=resource_capacity_allocated,json=resourceCapacityAllocated,proto3" json:"resource_capacity_allocated,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}              `json:"-"`
	XXX_unrecognized          []byte                `json:"-"`
	XXX_sizecache             int32                 `json:"-"`
}

func (m *StorageRecord) Reset()         { *m = StorageRecord{} }
func (m *StorageRecord) String() string { return proto.CompactTextString(m) }
func (*StorageRecord) ProtoMessage()    {}
func (*StorageRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_9f5515b6c2eb5223, []int{2}
}
func (m *StorageRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageRecord.Unmarshal(m, b)
}
func (m *StorageRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageRecord.Marshal(b, m, deterministic)
}
func (dst *StorageRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageRecord.Merge(dst, src)
}
func (m *StorageRecord) XXX_Size() int {
	return xxx_messageInfo_StorageRecord.Size(m)
}
func (m *StorageRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StorageRecord proto.InternalMessageInfo

func (m *StorageRecord) GetRecordID() string {
	if m != nil {
		return m.RecordID
	}
	return ""
}

func (m *StorageRecord) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *StorageRecord) GetStorageSystem() string {
	if m != nil {
		return m.StorageSystem
	}
	return ""
}

func (m *StorageRecord) GetSite() *wrappers.StringValue {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *StorageRecord) GetStorageShare() *wrappers.StringValue {
	if m != nil {
		return m.StorageShare
	}
	return nil
}

func (m *StorageRecord) GetStorageMedia() *wrappers.StringValue {
	if m != nil {
		return m.StorageMedia
	}
	return nil
}

func (m *StorageRecord) GetStorageClass() *wrappers.StringValue {
	if m != nil {
		return m.StorageClass
	}
	return nil
}

func (m *StorageRecord) GetFileCount() *wrappers.StringValue {
	if m != nil {
		return m.FileCount
	}
	return nil
}

func (m *StorageRecord) GetDirectoryPath() *wrappers.StringValue {
	if m != nil {
		return m.DirectoryPath
	}
	return nil
}

func (m *StorageRecord) GetLocalUser() *wrappers.StringValue {
	if m != nil {
		return m.LocalUser
	}
	return nil
}

func (m *StorageRecord) GetLocalGroup() *wrappers.StringValue {
	if m != nil {
		return m.LocalGroup
	}
	return nil
}

func (m *StorageRecord) GetUserIdentity() *wrappers.StringValue {
	if m != nil {
		return m.UserIdentity
	}
	return nil
}

func (m *StorageRecord) GetGroup() *wrappers.StringValue {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *StorageRecord) GetGroupAttribute() *wrappers.StringValue {
	if m != nil {
		return m.GroupAttribute
	}
	return nil
}

func (m *StorageRecord) GetGroupAttributeType() *wrappers.StringValue {
	if m != nil {
		return m.GroupAttributeType
	}
	return nil
}

func (m *StorageRecord) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StorageRecord) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *StorageRecord) GetResourceCapacityUsed() uint64 {
	if m != nil {
		return m.ResourceCapacityUsed
	}
	return 0
}

func (m *StorageRecord) GetLogicalCapacityUsed() *wrappers.UInt64Value {
	if m != nil {
		return m.LogicalCapacityUsed
	}
	return nil
}

func (m *StorageRecord) GetResourceCapacityAllocated() *wrappers.UInt64Value {
	if m != nil {
		return m.ResourceCapacityAllocated
	}
	return nil
}

type AccountingData struct {
	// Types that are valid to be assigned to Data:
	//	*AccountingData_Identifier
	//	*AccountingData_Vm
	//	*AccountingData_Ip
	//	*AccountingData_Storage
	Data                 isAccountingData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AccountingData) Reset()         { *m = AccountingData{} }
func (m *AccountingData) String() string { return proto.CompactTextString(m) }
func (*AccountingData) ProtoMessage()    {}
func (*AccountingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_9f5515b6c2eb5223, []int{3}
}
func (m *AccountingData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountingData.Unmarshal(m, b)
}
func (m *AccountingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountingData.Marshal(b, m, deterministic)
}
func (dst *AccountingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountingData.Merge(dst, src)
}
func (m *AccountingData) XXX_Size() int {
	return xxx_messageInfo_AccountingData.Size(m)
}
func (m *AccountingData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountingData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountingData proto.InternalMessageInfo

type isAccountingData_Data interface {
	isAccountingData_Data()
}

type AccountingData_Identifier struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type AccountingData_Vm struct {
	Vm *VmRecord `protobuf:"bytes,2,opt,name=vm,proto3,oneof"`
}

type AccountingData_Ip struct {
	Ip *IpRecord `protobuf:"bytes,3,opt,name=ip,proto3,oneof"`
}

type AccountingData_Storage struct {
	Storage *StorageRecord `protobuf:"bytes,4,opt,name=storage,proto3,oneof"`
}

func (*AccountingData_Identifier) isAccountingData_Data() {}

func (*AccountingData_Vm) isAccountingData_Data() {}

func (*AccountingData_Ip) isAccountingData_Data() {}

func (*AccountingData_Storage) isAccountingData_Data() {}

func (m *AccountingData) GetData() isAccountingData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AccountingData) GetIdentifier() string {
	if x, ok := m.GetData().(*AccountingData_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (m *AccountingData) GetVm() *VmRecord {
	if x, ok := m.GetData().(*AccountingData_Vm); ok {
		return x.Vm
	}
	return nil
}

func (m *AccountingData) GetIp() *IpRecord {
	if x, ok := m.GetData().(*AccountingData_Ip); ok {
		return x.Ip
	}
	return nil
}

func (m *AccountingData) GetStorage() *StorageRecord {
	if x, ok := m.GetData().(*AccountingData_Storage); ok {
		return x.Storage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AccountingData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AccountingData_OneofMarshaler, _AccountingData_OneofUnmarshaler, _AccountingData_OneofSizer, []interface{}{
		(*AccountingData_Identifier)(nil),
		(*AccountingData_Vm)(nil),
		(*AccountingData_Ip)(nil),
		(*AccountingData_Storage)(nil),
	}
}

func _AccountingData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AccountingData)
	// data
	switch x := m.Data.(type) {
	case *AccountingData_Identifier:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Identifier)
	case *AccountingData_Vm:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vm); err != nil {
			return err
		}
	case *AccountingData_Ip:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ip); err != nil {
			return err
		}
	case *AccountingData_Storage:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Storage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AccountingData.Data has unexpected type %T", x)
	}
	return nil
}

func _AccountingData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AccountingData)
	switch tag {
	case 1: // data.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &AccountingData_Identifier{x}
		return true, err
	case 2: // data.vm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmRecord)
		err := b.DecodeMessage(msg)
		m.Data = &AccountingData_Vm{msg}
		return true, err
	case 3: // data.ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpRecord)
		err := b.DecodeMessage(msg)
		m.Data = &AccountingData_Ip{msg}
		return true, err
	case 4: // data.storage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StorageRecord)
		err := b.DecodeMessage(msg)
		m.Data = &AccountingData_Storage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AccountingData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AccountingData)
	// data
	switch x := m.Data.(type) {
	case *AccountingData_Identifier:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Identifier)))
		n += len(x.Identifier)
	case *AccountingData_Vm:
		s := proto.Size(x.Vm)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccountingData_Ip:
		s := proto.Size(x.Ip)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccountingData_Storage:
		s := proto.Size(x.Storage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*VmRecord)(nil), "goat_grpc.VmRecord")
	proto.RegisterType((*IpRecord)(nil), "goat_grpc.IpRecord")
	proto.RegisterType((*StorageRecord)(nil), "goat_grpc.StorageRecord")
	proto.RegisterType((*AccountingData)(nil), "goat_grpc.AccountingData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountingServiceClient interface {
	Process(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessClient, error)
}

type accountingServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountingServiceClient(cc *grpc.ClientConn) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) Process(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountingService_serviceDesc.Streams[0], "/goat_grpc.AccountingService/Process", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessClient{stream}
	return x, nil
}

type AccountingService_ProcessClient interface {
	Send(*AccountingData) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessClient) Send(m *AccountingData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountingServiceServer is the server API for AccountingService service.
type AccountingServiceServer interface {
	Process(AccountingService_ProcessServer) error
}

func RegisterAccountingServiceServer(s *grpc.Server, srv AccountingServiceServer) {
	s.RegisterService(&_AccountingService_serviceDesc, srv)
}

func _AccountingService_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).Process(&accountingServiceProcessServer{stream})
}

type AccountingService_ProcessServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*AccountingData, error)
	grpc.ServerStream
}

type accountingServiceProcessServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessServer) Recv() (*AccountingData, error) {
	m := new(AccountingData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AccountingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goat_grpc.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _AccountingService_Process_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "goat.proto",
}

func init() { proto.RegisterFile("goat.proto", fileDescriptor_goat_9f5515b6c2eb5223) }

var fileDescriptor_goat_9f5515b6c2eb5223 = []byte{
	// 1178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0xdd, 0x4e, 0x1b, 0x47,
	0x14, 0xc7, 0x31, 0x21, 0xb6, 0xf7, 0xd8, 0x6b, 0x9b, 0x81, 0xc0, 0x62, 0xda, 0x86, 0x22, 0x45,
	0xe2, 0xca, 0xa9, 0x28, 0x6d, 0x15, 0xa5, 0x4d, 0x4b, 0x0c, 0x09, 0xbe, 0x68, 0x8a, 0x96, 0x90,
	0xab, 0x4a, 0xab, 0xf1, 0xee, 0x60, 0x46, 0xd9, 0x8f, 0xe9, 0xec, 0x2c, 0xc8, 0x8f, 0xd1, 0x17,
	0xea, 0x23, 0xf5, 0x0d, 0x2a, 0x55, 0xf3, 0xb1, 0xf6, 0x1a, 0x0b, 0x79, 0xd4, 0x8b, 0xde, 0xc1,
	0xcc, 0xf9, 0xfd, 0xe7, 0xcc, 0xce, 0x99, 0xf3, 0x1f, 0x03, 0x4c, 0x32, 0x2c, 0x06, 0x8c, 0x67,
	0x22, 0x43, 0x8e, 0xfc, 0x3b, 0x98, 0x70, 0x16, 0xf6, 0xf7, 0x27, 0x59, 0x36, 0x89, 0xc9, 0x4b,
	0x35, 0x31, 0x2e, 0x6e, 0x5e, 0x92, 0x84, 0x89, 0xa9, 0x8e, 0xeb, 0x3f, 0x7f, 0x38, 0x29, 0x68,
	0x42, 0x72, 0x81, 0x13, 0x66, 0x02, 0xbe, 0x7a, 0x18, 0x10, 0x15, 0x1c, 0x0b, 0x9a, 0xa5, 0x8f,
	0xcd, 0xdf, 0x73, 0xcc, 0x18, 0xe1, 0xb9, 0x9e, 0x3f, 0xfc, 0xa7, 0x05, 0xcd, 0x4f, 0x89, 0x4f,
	0xc2, 0x8c, 0x47, 0x68, 0x17, 0x1a, 0x77, 0x49, 0x50, 0x14, 0x34, 0xf2, 0x6a, 0x07, 0xb5, 0x23,
	0xc7, 0xaf, 0xdf, 0x25, 0xd7, 0x05, 0x8d, 0xd0, 0x3e, 0x38, 0x39, 0x15, 0x24, 0x48, 0x71, 0x42,
	0xbc, 0x75, 0x35, 0xd5, 0x94, 0x03, 0x1f, 0x70, 0x42, 0xd0, 0x25, 0x3c, 0x0b, 0xe3, 0xac, 0x88,
	0x82, 0x30, 0x4b, 0x58, 0x21, 0x48, 0x90, 0x13, 0x7e, 0x47, 0x43, 0xe2, 0x3d, 0x39, 0xa8, 0x1d,
	0xb5, 0x8e, 0xbf, 0x18, 0xe8, 0x14, 0x06, 0x65, 0x0a, 0x83, 0x2b, 0xc1, 0x69, 0x3a, 0xf9, 0x84,
	0xe3, 0x82, 0xf8, 0x5b, 0x0a, 0x1d, 0x6a, 0xf2, 0x4a, 0x83, 0xe8, 0x6b, 0x68, 0x27, 0x38, 0xbc,
	0xa5, 0xa9, 0x59, 0x71, 0x43, 0xad, 0xd8, 0x32, 0x63, 0x6a, 0xd1, 0x5f, 0xc0, 0x8d, 0xb3, 0x10,
	0xc7, 0x41, 0x91, 0x13, 0x1e, 0xd0, 0xc8, 0x7b, 0x6a, 0xb1, 0x58, 0x4b, 0x21, 0xd7, 0x39, 0xe1,
	0xa3, 0x08, 0xbd, 0x85, 0x8e, 0x56, 0x98, 0xf0, 0xac, 0x60, 0x52, 0xa2, 0x6e, 0x21, 0xd1, 0x56,
	0xcc, 0x7b, 0x89, 0x8c, 0x22, 0xf4, 0x0e, 0x7a, 0x93, 0x38, 0x1b, 0x97, 0x69, 0xa8, 0x64, 0x1b,
	0x16, 0x2a, 0x1d, 0x4d, 0xc9, 0x4c, 0xd4, 0x6e, 0xbe, 0x81, 0x8d, 0x9b, 0x3f, 0x70, 0xea, 0x35,
	0x2d, 0x58, 0x15, 0x89, 0x4e, 0xa0, 0x9e, 0x0b, 0x2c, 0x8a, 0xdc, 0x73, 0x2c, 0x18, 0x13, 0x8b,
	0x5e, 0x01, 0xe4, 0x02, 0x73, 0x11, 0xc8, 0x32, 0xf2, 0x40, 0x91, 0xfd, 0x25, 0xf2, 0x63, 0x59,
	0x63, 0xbe, 0xa3, 0xa2, 0xe5, 0xff, 0xe8, 0x3b, 0x68, 0x92, 0x34, 0xd2, 0x60, 0x6b, 0x25, 0xd8,
	0x20, 0x69, 0xa4, 0xb0, 0x33, 0xe8, 0xe5, 0x45, 0xce, 0x24, 0x5a, 0x56, 0xa6, 0xd7, 0x56, 0xf8,
	0xde, 0x12, 0x7e, 0x66, 0x02, 0xfc, 0xae, 0x41, 0xca, 0x01, 0xf4, 0x06, 0xdc, 0x7b, 0x1c, 0xc7,
	0x73, 0x09, 0x77, 0x95, 0x44, 0x5b, 0xc6, 0xcf, 0xf8, 0x1f, 0xa1, 0x1d, 0xb2, 0x62, 0x8e, 0x77,
	0x56, 0xe1, 0xad, 0x90, 0x15, 0x33, 0x7a, 0x1f, 0x1c, 0x49, 0x87, 0x59, 0x91, 0x0a, 0xaf, 0x7b,
	0x50, 0x3b, 0x72, 0xfd, 0x66, 0xc8, 0x8a, 0xa1, 0xfc, 0x1f, 0xfd, 0x0c, 0xed, 0x94, 0x88, 0xfb,
	0x8c, 0x7f, 0x0e, 0xc4, 0x94, 0x11, 0xaf, 0x67, 0x53, 0x87, 0x86, 0xf8, 0x38, 0x65, 0x04, 0x9d,
	0x43, 0xb7, 0x14, 0xa0, 0xe9, 0x38, 0x2b, 0xd2, 0xc8, 0xdb, 0x7c, 0x44, 0xe3, 0x7a, 0x94, 0x8a,
	0xef, 0x4f, 0x4c, 0x09, 0x19, 0x68, 0xa4, 0x19, 0xf4, 0x1e, 0x7a, 0xa5, 0x4c, 0x56, 0x08, 0xad,
	0x83, 0x2c, 0x74, 0xca, 0xc5, 0x7f, 0x33, 0x10, 0x3a, 0x83, 0x2e, 0x2b, 0xc6, 0x31, 0x0d, 0x03,
	0xca, 0xcc, 0x9e, 0xb7, 0x2c, 0x74, 0x5c, 0x0d, 0x8d, 0x98, 0xfe, 0x2c, 0x27, 0x50, 0x4f, 0x48,
	0x92, 0xf1, 0xa9, 0xb7, 0x6d, 0x01, 0x9b, 0x58, 0x79, 0x0f, 0x22, 0x9a, 0x7f, 0xf6, 0x9e, 0x59,
	0x30, 0x2a, 0x12, 0x0d, 0xa1, 0x33, 0x26, 0x69, 0x78, 0x9b, 0xe0, 0xf2, 0x00, 0x76, 0x2c, 0x0e,
	0xc0, 0x9d, 0x31, 0xea, 0x08, 0x5e, 0x81, 0x33, 0x1b, 0xf0, 0x76, 0x15, 0xbf, 0xbf, 0xc4, 0xbf,
	0x8b, 0x33, 0x2c, 0x34, 0x3e, 0x8f, 0x46, 0x17, 0xb0, 0x99, 0x8b, 0x8c, 0xe3, 0x09, 0x09, 0xb8,
	0x6a, 0xa2, 0xb2, 0x91, 0x78, 0x16, 0x29, 0x74, 0x0d, 0xa6, 0x5b, 0xef, 0x28, 0x42, 0x3f, 0x40,
	0x93, 0x26, 0x52, 0x87, 0x46, 0xde, 0x9e, 0x85, 0x40, 0x43, 0x45, 0x8f, 0x22, 0xf4, 0x1a, 0x40,
	0xf7, 0x5f, 0xb5, 0xfd, 0xbe, 0x05, 0xea, 0xa8, 0x78, 0xb9, 0xf5, 0xc3, 0x3f, 0x9f, 0x40, 0x73,
	0xc4, 0x4c, 0xff, 0x3f, 0x87, 0x5e, 0x42, 0x70, 0x5e, 0x70, 0x92, 0x90, 0xd4, 0x34, 0x89, 0xda,
	0xca, 0xbb, 0xde, 0xad, 0x30, 0xea, 0xce, 0xff, 0xcf, 0x6e, 0xf1, 0xe5, 0xc2, 0xfe, 0xb5, 0x57,
	0xcc, 0x77, 0x28, 0xa7, 0xe7, 0x4e, 0xa1, 0x6c, 0xc2, 0xf1, 0x9d, 0x99, 0x11, 0xa0, 0xe7, 0xd0,
	0xaa, 0xd8, 0x80, 0xf2, 0x00, 0xc7, 0x87, 0x79, 0x97, 0x47, 0x47, 0x8f, 0xf4, 0x78, 0x67, 0xa9,
	0x8b, 0xa3, 0x4a, 0x17, 0x77, 0x4c, 0x9f, 0xde, 0x85, 0x06, 0x65, 0x3a, 0x33, 0x47, 0x5b, 0x2a,
	0x65, 0x2a, 0xad, 0x3d, 0x68, 0xce, 0xee, 0x17, 0xa8, 0x9e, 0xd2, 0xa0, 0xfa, 0xee, 0x1c, 0xfe,
	0xed, 0x80, 0x7b, 0x55, 0xad, 0x0e, 0xd4, 0x87, 0xa6, 0xae, 0xae, 0xd1, 0x99, 0x71, 0xe6, 0xd9,
	0xff, 0xe8, 0x35, 0xb4, 0x42, 0x4e, 0xb0, 0x20, 0xfa, 0xbc, 0xd6, 0x57, 0x9e, 0x17, 0xe8, 0x70,
	0x75, 0x54, 0x2f, 0xa0, 0x53, 0x96, 0x6f, 0x3e, 0xcd, 0x05, 0x49, 0xd4, 0x31, 0x38, 0xbe, 0x6b,
	0x46, 0xaf, 0xd4, 0xa0, 0xbc, 0x97, 0xf2, 0x00, 0xd5, 0xc7, 0x5d, 0xe9, 0x4f, 0x32, 0x12, 0x9d,
	0x82, 0x3b, 0x13, 0xbe, 0xc5, 0x9c, 0x58, 0xf9, 0x73, 0xbb, 0x5c, 0x55, 0x12, 0x55, 0x89, 0x84,
	0x44, 0x14, 0xdb, 0xf9, 0xb3, 0x41, 0x7e, 0x95, 0x44, 0x55, 0x22, 0x8c, 0x71, 0x9e, 0x5b, 0x99,
	0x73, 0x29, 0x31, 0x94, 0x84, 0xbc, 0x5d, 0x37, 0x34, 0x26, 0xe6, 0xa4, 0x6c, 0x0c, 0xda, 0x91,
	0xf1, 0xba, 0x0b, 0x0e, 0xa1, 0x13, 0x51, 0x4e, 0x42, 0x91, 0xf1, 0x69, 0xc0, 0xb0, 0xb8, 0xb5,
	0x72, 0x6b, 0x77, 0xc6, 0x5c, 0x62, 0x71, 0x2b, 0x33, 0xa8, 0x14, 0x30, 0xd8, 0x64, 0x30, 0x2f,
	0xef, 0x9f, 0x16, 0xcb, 0xbb, 0x65, 0x41, 0x57, 0x8b, 0xff, 0x14, 0x5c, 0xf3, 0xc0, 0x22, 0xa9,
	0xa0, 0x62, 0x6a, 0xbc, 0x7b, 0xc5, 0x07, 0x2c, 0xd4, 0x0b, 0x4b, 0x13, 0xe8, 0x18, 0x9e, 0xea,
	0xb5, 0x5d, 0x0b, 0x54, 0x87, 0x4a, 0x4f, 0xd4, 0xaf, 0x32, 0x2c, 0x04, 0xa7, 0xe3, 0x42, 0x10,
	0x63, 0xd9, 0xab, 0x9e, 0x55, 0x12, 0x3a, 0x2d, 0x19, 0xf4, 0x01, 0xb6, 0x1f, 0xc8, 0xe8, 0x9b,
	0xd8, 0xb5, 0xd0, 0x42, 0x8b, 0x5a, 0xc6, 0x27, 0xaa, 0xcf, 0xa7, 0xde, 0x7f, 0x7d, 0x3e, 0x6d,
	0xda, 0x3f, 0x9f, 0x4e, 0x60, 0x87, 0x93, 0x3c, 0x2b, 0x78, 0x48, 0x82, 0x10, 0x33, 0x1c, 0x52,
	0x31, 0x95, 0x75, 0xa0, 0xbd, 0x7d, 0xc3, 0xdf, 0x2e, 0x67, 0x87, 0x66, 0xf2, 0x3a, 0x27, 0x91,
	0xec, 0xb1, 0x71, 0x36, 0xa1, 0xf2, 0xd8, 0x17, 0x21, 0x1b, 0x23, 0xdf, 0x32, 0xe8, 0x82, 0xe2,
	0xef, 0xb0, 0xbf, 0x9c, 0x07, 0x8e, 0x65, 0xa5, 0x08, 0x12, 0x59, 0x79, 0xfc, 0xde, 0xc3, 0x54,
	0x4f, 0x4b, 0xfc, 0xf0, 0xaf, 0x1a, 0x74, 0x4e, 0x43, 0x75, 0xc3, 0x68, 0x3a, 0x39, 0xc3, 0x02,
	0xa3, 0x03, 0x00, 0x5d, 0x73, 0x37, 0x94, 0x70, 0xdd, 0xf3, 0x2e, 0xd6, 0xfc, 0xca, 0x18, 0x7a,
	0x01, 0xeb, 0x77, 0x89, 0x69, 0x77, 0x5b, 0x83, 0xd9, 0xef, 0xa9, 0x41, 0xf9, 0x6b, 0xe6, 0x62,
	0xcd, 0x5f, 0xbf, 0x4b, 0x64, 0x18, 0x65, 0xc6, 0x5c, 0xaa, 0x61, 0xa5, 0xe9, 0xc9, 0x30, 0xca,
	0xd0, 0x09, 0x34, 0xcc, 0xb5, 0x37, 0x4d, 0xce, 0xab, 0xc4, 0x2e, 0x34, 0xe3, 0x8b, 0x35, 0xbf,
	0x0c, 0x7d, 0x5b, 0x87, 0x8d, 0x08, 0x0b, 0x7c, 0x7c, 0x05, 0x9b, 0xf3, 0xfc, 0x4b, 0x5f, 0x7a,
	0x03, 0x8d, 0x4b, 0x9e, 0x85, 0x24, 0xcf, 0xd1, 0x5e, 0x45, 0x6c, 0x71, 0xa3, 0xfd, 0x9d, 0xa5,
	0x8f, 0x76, 0x2e, 0x7f, 0xff, 0x1d, 0xd5, 0xc6, 0x75, 0x35, 0xf2, 0xed, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xd2, 0x81, 0xee, 0x1e, 0x38, 0x0e, 0x00, 0x00,
}
