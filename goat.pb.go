// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: goat.proto

package goat_proto_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VmRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmUuid              string                  `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	SiteName            string                  `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	CloudComputeService *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=cloud_compute_service,json=cloudComputeService,proto3" json:"cloud_compute_service,omitempty"`
	MachineName         string                  `protobuf:"bytes,4,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"`
	LocalUserId         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=local_user_id,json=localUserId,proto3" json:"local_user_id,omitempty"`
	LocalGroupId        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=local_group_id,json=localGroupId,proto3" json:"local_group_id,omitempty"`
	GlobalUserName      *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=fqan,proto3" json:"fqan,omitempty"`
	Status              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	StartTime           *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SuspendDuration     *durationpb.Duration    `protobuf:"bytes,12,opt,name=suspend_duration,json=suspendDuration,proto3" json:"suspend_duration,omitempty"`
	WallDuration        *durationpb.Duration    `protobuf:"bytes,13,opt,name=wall_duration,json=wallDuration,proto3" json:"wall_duration,omitempty"`
	CpuDuration         *durationpb.Duration    `protobuf:"bytes,14,opt,name=cpu_duration,json=cpuDuration,proto3" json:"cpu_duration,omitempty"`
	CpuCount            uint32                  `protobuf:"varint,15,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	NetworkType         *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	NetworkInbound      *wrapperspb.UInt64Value `protobuf:"bytes,17,opt,name=network_inbound,json=networkInbound,proto3" json:"network_inbound,omitempty"`
	NetworkOutbound     *wrapperspb.UInt64Value `protobuf:"bytes,18,opt,name=network_outbound,json=networkOutbound,proto3" json:"network_outbound,omitempty"`
	PublicIpCount       *wrapperspb.UInt64Value `protobuf:"bytes,19,opt,name=public_ip_count,json=publicIpCount,proto3" json:"public_ip_count,omitempty"`
	Memory              *wrapperspb.UInt64Value `protobuf:"bytes,20,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk                *wrapperspb.UInt64Value `protobuf:"bytes,21,opt,name=disk,proto3" json:"disk,omitempty"`
	BenchmarkType       *wrapperspb.StringValue `protobuf:"bytes,22,opt,name=benchmark_type,json=benchmarkType,proto3" json:"benchmark_type,omitempty"`
	Benchmark           *wrapperspb.FloatValue  `protobuf:"bytes,23,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	StorageRecordId     *wrapperspb.StringValue `protobuf:"bytes,24,opt,name=storage_record_id,json=storageRecordId,proto3" json:"storage_record_id,omitempty"`
	ImageId             *wrapperspb.StringValue `protobuf:"bytes,25,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	CloudType           *wrapperspb.StringValue `protobuf:"bytes,26,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
}

func (x *VmRecord) Reset() {
	*x = VmRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmRecord) ProtoMessage() {}

func (x *VmRecord) ProtoReflect() protoreflect.Message {
	mi := &file_goat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmRecord.ProtoReflect.Descriptor instead.
func (*VmRecord) Descriptor() ([]byte, []int) {
	return file_goat_proto_rawDescGZIP(), []int{0}
}

func (x *VmRecord) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *VmRecord) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *VmRecord) GetCloudComputeService() *wrapperspb.StringValue {
	if x != nil {
		return x.CloudComputeService
	}
	return nil
}

func (x *VmRecord) GetMachineName() string {
	if x != nil {
		return x.MachineName
	}
	return ""
}

func (x *VmRecord) GetLocalUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.LocalUserId
	}
	return nil
}

func (x *VmRecord) GetLocalGroupId() *wrapperspb.StringValue {
	if x != nil {
		return x.LocalGroupId
	}
	return nil
}

func (x *VmRecord) GetGlobalUserName() *wrapperspb.StringValue {
	if x != nil {
		return x.GlobalUserName
	}
	return nil
}

func (x *VmRecord) GetFqan() *wrapperspb.StringValue {
	if x != nil {
		return x.Fqan
	}
	return nil
}

func (x *VmRecord) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VmRecord) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *VmRecord) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *VmRecord) GetSuspendDuration() *durationpb.Duration {
	if x != nil {
		return x.SuspendDuration
	}
	return nil
}

func (x *VmRecord) GetWallDuration() *durationpb.Duration {
	if x != nil {
		return x.WallDuration
	}
	return nil
}

func (x *VmRecord) GetCpuDuration() *durationpb.Duration {
	if x != nil {
		return x.CpuDuration
	}
	return nil
}

func (x *VmRecord) GetCpuCount() uint32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *VmRecord) GetNetworkType() *wrapperspb.StringValue {
	if x != nil {
		return x.NetworkType
	}
	return nil
}

func (x *VmRecord) GetNetworkInbound() *wrapperspb.UInt64Value {
	if x != nil {
		return x.NetworkInbound
	}
	return nil
}

func (x *VmRecord) GetNetworkOutbound() *wrapperspb.UInt64Value {
	if x != nil {
		return x.NetworkOutbound
	}
	return nil
}

func (x *VmRecord) GetPublicIpCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.PublicIpCount
	}
	return nil
}

func (x *VmRecord) GetMemory() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *VmRecord) GetDisk() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *VmRecord) GetBenchmarkType() *wrapperspb.StringValue {
	if x != nil {
		return x.BenchmarkType
	}
	return nil
}

func (x *VmRecord) GetBenchmark() *wrapperspb.FloatValue {
	if x != nil {
		return x.Benchmark
	}
	return nil
}

func (x *VmRecord) GetStorageRecordId() *wrapperspb.StringValue {
	if x != nil {
		return x.StorageRecordId
	}
	return nil
}

func (x *VmRecord) GetImageId() *wrapperspb.StringValue {
	if x != nil {
		return x.ImageId
	}
	return nil
}

func (x *VmRecord) GetCloudType() *wrapperspb.StringValue {
	if x != nil {
		return x.CloudType
	}
	return nil
}

type IpRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementTime     *timestamppb.Timestamp  `protobuf:"bytes,1,opt,name=measurement_time,json=measurementTime,proto3" json:"measurement_time,omitempty"`
	SiteName            string                  `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	CloudComputeService *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=cloud_compute_service,json=cloudComputeService,proto3" json:"cloud_compute_service,omitempty"`
	CloudType           string                  `protobuf:"bytes,4,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	LocalUser           string                  `protobuf:"bytes,5,opt,name=local_user,json=localUser,proto3" json:"local_user,omitempty"`
	LocalGroup          string                  `protobuf:"bytes,6,opt,name=local_group,json=localGroup,proto3" json:"local_group,omitempty"`
	GlobalUserName      string                  `protobuf:"bytes,7,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                string                  `protobuf:"bytes,8,opt,name=fqan,proto3" json:"fqan,omitempty"`
	IpType              string                  `protobuf:"bytes,9,opt,name=ip_type,json=ipType,proto3" json:"ip_type,omitempty"`
	IpCount             uint32                  `protobuf:"varint,10,opt,name=ip_count,json=ipCount,proto3" json:"ip_count,omitempty"`
}

func (x *IpRecord) Reset() {
	*x = IpRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRecord) ProtoMessage() {}

func (x *IpRecord) ProtoReflect() protoreflect.Message {
	mi := &file_goat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRecord.ProtoReflect.Descriptor instead.
func (*IpRecord) Descriptor() ([]byte, []int) {
	return file_goat_proto_rawDescGZIP(), []int{1}
}

func (x *IpRecord) GetMeasurementTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasurementTime
	}
	return nil
}

func (x *IpRecord) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *IpRecord) GetCloudComputeService() *wrapperspb.StringValue {
	if x != nil {
		return x.CloudComputeService
	}
	return nil
}

func (x *IpRecord) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *IpRecord) GetLocalUser() string {
	if x != nil {
		return x.LocalUser
	}
	return ""
}

func (x *IpRecord) GetLocalGroup() string {
	if x != nil {
		return x.LocalGroup
	}
	return ""
}

func (x *IpRecord) GetGlobalUserName() string {
	if x != nil {
		return x.GlobalUserName
	}
	return ""
}

func (x *IpRecord) GetFqan() string {
	if x != nil {
		return x.Fqan
	}
	return ""
}

func (x *IpRecord) GetIpType() string {
	if x != nil {
		return x.IpType
	}
	return ""
}

func (x *IpRecord) GetIpCount() uint32 {
	if x != nil {
		return x.IpCount
	}
	return 0
}

type StorageRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID                  string                  `protobuf:"bytes,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	CreateTime                *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StorageSystem             string                  `protobuf:"bytes,3,opt,name=storage_system,json=storageSystem,proto3" json:"storage_system,omitempty"`
	Site                      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	StorageShare              *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=storage_share,json=storageShare,proto3" json:"storage_share,omitempty"`
	StorageMedia              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=storage_media,json=storageMedia,proto3" json:"storage_media,omitempty"`
	StorageClass              *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	FileCount                 *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	DirectoryPath             *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=directory_path,json=directoryPath,proto3" json:"directory_path,omitempty"`
	LocalUser                 *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=local_user,json=localUser,proto3" json:"local_user,omitempty"`
	LocalGroup                *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=local_group,json=localGroup,proto3" json:"local_group,omitempty"`
	UserIdentity              *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	Group                     *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=group,proto3" json:"group,omitempty"`
	GroupAttribute            *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=group_attribute,json=groupAttribute,proto3" json:"group_attribute,omitempty"`
	GroupAttributeType        *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=group_attribute_type,json=groupAttributeType,proto3" json:"group_attribute_type,omitempty"`
	StartTime                 *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                   *timestamppb.Timestamp  `protobuf:"bytes,17,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ResourceCapacityUsed      uint64                  `protobuf:"varint,18,opt,name=resource_capacity_used,json=resourceCapacityUsed,proto3" json:"resource_capacity_used,omitempty"`
	LogicalCapacityUsed       *wrapperspb.UInt64Value `protobuf:"bytes,19,opt,name=logical_capacity_used,json=logicalCapacityUsed,proto3" json:"logical_capacity_used,omitempty"`
	ResourceCapacityAllocated *wrapperspb.UInt64Value `protobuf:"bytes,20,opt,name=resource_capacity_allocated,json=resourceCapacityAllocated,proto3" json:"resource_capacity_allocated,omitempty"`
}

func (x *StorageRecord) Reset() {
	*x = StorageRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRecord) ProtoMessage() {}

func (x *StorageRecord) ProtoReflect() protoreflect.Message {
	mi := &file_goat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRecord.ProtoReflect.Descriptor instead.
func (*StorageRecord) Descriptor() ([]byte, []int) {
	return file_goat_proto_rawDescGZIP(), []int{2}
}

func (x *StorageRecord) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *StorageRecord) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *StorageRecord) GetStorageSystem() string {
	if x != nil {
		return x.StorageSystem
	}
	return ""
}

func (x *StorageRecord) GetSite() *wrapperspb.StringValue {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *StorageRecord) GetStorageShare() *wrapperspb.StringValue {
	if x != nil {
		return x.StorageShare
	}
	return nil
}

func (x *StorageRecord) GetStorageMedia() *wrapperspb.StringValue {
	if x != nil {
		return x.StorageMedia
	}
	return nil
}

func (x *StorageRecord) GetStorageClass() *wrapperspb.StringValue {
	if x != nil {
		return x.StorageClass
	}
	return nil
}

func (x *StorageRecord) GetFileCount() *wrapperspb.StringValue {
	if x != nil {
		return x.FileCount
	}
	return nil
}

func (x *StorageRecord) GetDirectoryPath() *wrapperspb.StringValue {
	if x != nil {
		return x.DirectoryPath
	}
	return nil
}

func (x *StorageRecord) GetLocalUser() *wrapperspb.StringValue {
	if x != nil {
		return x.LocalUser
	}
	return nil
}

func (x *StorageRecord) GetLocalGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.LocalGroup
	}
	return nil
}

func (x *StorageRecord) GetUserIdentity() *wrapperspb.StringValue {
	if x != nil {
		return x.UserIdentity
	}
	return nil
}

func (x *StorageRecord) GetGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *StorageRecord) GetGroupAttribute() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupAttribute
	}
	return nil
}

func (x *StorageRecord) GetGroupAttributeType() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupAttributeType
	}
	return nil
}

func (x *StorageRecord) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StorageRecord) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *StorageRecord) GetResourceCapacityUsed() uint64 {
	if x != nil {
		return x.ResourceCapacityUsed
	}
	return 0
}

func (x *StorageRecord) GetLogicalCapacityUsed() *wrapperspb.UInt64Value {
	if x != nil {
		return x.LogicalCapacityUsed
	}
	return nil
}

func (x *StorageRecord) GetResourceCapacityAllocated() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ResourceCapacityAllocated
	}
	return nil
}

type GPURecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementMonth     *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=measurement_month,json=measurementMonth,proto3" json:"measurement_month,omitempty"`
	MeasurementYear      *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=measurement_year,json=measurementYear,proto3" json:"measurement_year,omitempty"`
	AssociatedRecordType *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=associated_record_type,json=associatedRecordType,proto3" json:"associated_record_type,omitempty"`
	AssociatedRecord     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=associated_record,json=associatedRecord,proto3" json:"associated_record,omitempty"`
	GlobalUserName       string                  `protobuf:"bytes,5,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                 *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=fqan,proto3" json:"fqan,omitempty"`
	SiteName             *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Count                *wrapperspb.FloatValue  `protobuf:"bytes,8,opt,name=count,proto3" json:"count,omitempty"`
	Cores                uint32                  `protobuf:"varint,9,opt,name=cores,proto3" json:"cores,omitempty"`
	ActiveDuration       uint64                  `protobuf:"varint,10,opt,name=active_duration,json=activeDuration,proto3" json:"active_duration,omitempty"`
	AvailableDuration    *wrapperspb.UInt64Value `protobuf:"bytes,11,opt,name=available_duration,json=availableDuration,proto3" json:"available_duration,omitempty"`
	BenchmarkType        string                  `protobuf:"bytes,12,opt,name=benchmark_type,json=benchmarkType,proto3" json:"benchmark_type,omitempty"`
	Benchmark            float32                 `protobuf:"fixed32,13,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	Type                 *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=type,proto3" json:"type,omitempty"`
	Model                string                  `protobuf:"bytes,15,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *GPURecord) Reset() {
	*x = GPURecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPURecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPURecord) ProtoMessage() {}

func (x *GPURecord) ProtoReflect() protoreflect.Message {
	mi := &file_goat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPURecord.ProtoReflect.Descriptor instead.
func (*GPURecord) Descriptor() ([]byte, []int) {
	return file_goat_proto_rawDescGZIP(), []int{3}
}

func (x *GPURecord) GetMeasurementMonth() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MeasurementMonth
	}
	return nil
}

func (x *GPURecord) GetMeasurementYear() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MeasurementYear
	}
	return nil
}

func (x *GPURecord) GetAssociatedRecordType() *wrapperspb.StringValue {
	if x != nil {
		return x.AssociatedRecordType
	}
	return nil
}

func (x *GPURecord) GetAssociatedRecord() *wrapperspb.StringValue {
	if x != nil {
		return x.AssociatedRecord
	}
	return nil
}

func (x *GPURecord) GetGlobalUserName() string {
	if x != nil {
		return x.GlobalUserName
	}
	return ""
}

func (x *GPURecord) GetFqan() *wrapperspb.StringValue {
	if x != nil {
		return x.Fqan
	}
	return nil
}

func (x *GPURecord) GetSiteName() *wrapperspb.StringValue {
	if x != nil {
		return x.SiteName
	}
	return nil
}

func (x *GPURecord) GetCount() *wrapperspb.FloatValue {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *GPURecord) GetCores() uint32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *GPURecord) GetActiveDuration() uint64 {
	if x != nil {
		return x.ActiveDuration
	}
	return 0
}

func (x *GPURecord) GetAvailableDuration() *wrapperspb.UInt64Value {
	if x != nil {
		return x.AvailableDuration
	}
	return nil
}

func (x *GPURecord) GetBenchmarkType() string {
	if x != nil {
		return x.BenchmarkType
	}
	return ""
}

func (x *GPURecord) GetBenchmark() float32 {
	if x != nil {
		return x.Benchmark
	}
	return 0
}

func (x *GPURecord) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GPURecord) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type VmData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*VmData_Identifier
	//	*VmData_Vm
	Data isVmData_Data `protobuf_oneof:"data"`
}

func (x *VmData) Reset() {
	*x = VmData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmData) ProtoMessage() {}

func (x *VmData) ProtoReflect() protoreflect.Message {
	mi := &file_goat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmData.ProtoReflect.Descriptor instead.
func (*VmData) Descriptor() ([]byte, []int) {
	return file_goat_proto_rawDescGZIP(), []int{4}
}

func (m *VmData) GetData() isVmData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *VmData) GetIdentifier() string {
	if x, ok := x.GetData().(*VmData_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (x *VmData) GetVm() *VmRecord {
	if x, ok := x.GetData().(*VmData_Vm); ok {
		return x.Vm
	}
	return nil
}

type isVmData_Data interface {
	isVmData_Data()
}

type VmData_Identifier struct {
	// identifier MUST be the first message of the stream
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type VmData_Vm struct {
	Vm *VmRecord `protobuf:"bytes,2,opt,name=vm,proto3,oneof"`
}

func (*VmData_Identifier) isVmData_Data() {}

func (*VmData_Vm) isVmData_Data() {}

type IpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*IpData_Identifier
	//	*IpData_Ip
	Data isIpData_Data `protobuf_oneof:"data"`
}

func (x *IpData) Reset() {
	*x = IpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpData) ProtoMessage() {}

func (x *IpData) ProtoReflect() protoreflect.Message {
	mi := &file_goat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpData.ProtoReflect.Descriptor instead.
func (*IpData) Descriptor() ([]byte, []int) {
	return file_goat_proto_rawDescGZIP(), []int{5}
}

func (m *IpData) GetData() isIpData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *IpData) GetIdentifier() string {
	if x, ok := x.GetData().(*IpData_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (x *IpData) GetIp() *IpRecord {
	if x, ok := x.GetData().(*IpData_Ip); ok {
		return x.Ip
	}
	return nil
}

type isIpData_Data interface {
	isIpData_Data()
}

type IpData_Identifier struct {
	// identifier MUST be the first message of the stream
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type IpData_Ip struct {
	Ip *IpRecord `protobuf:"bytes,2,opt,name=ip,proto3,oneof"`
}

func (*IpData_Identifier) isIpData_Data() {}

func (*IpData_Ip) isIpData_Data() {}

type StorageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*StorageData_Identifier
	//	*StorageData_Storage
	Data isStorageData_Data `protobuf_oneof:"data"`
}

func (x *StorageData) Reset() {
	*x = StorageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageData) ProtoMessage() {}

func (x *StorageData) ProtoReflect() protoreflect.Message {
	mi := &file_goat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageData.ProtoReflect.Descriptor instead.
func (*StorageData) Descriptor() ([]byte, []int) {
	return file_goat_proto_rawDescGZIP(), []int{6}
}

func (m *StorageData) GetData() isStorageData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *StorageData) GetIdentifier() string {
	if x, ok := x.GetData().(*StorageData_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (x *StorageData) GetStorage() *StorageRecord {
	if x, ok := x.GetData().(*StorageData_Storage); ok {
		return x.Storage
	}
	return nil
}

type isStorageData_Data interface {
	isStorageData_Data()
}

type StorageData_Identifier struct {
	// identifier MUST be the first message of the stream
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type StorageData_Storage struct {
	Storage *StorageRecord `protobuf:"bytes,2,opt,name=storage,proto3,oneof"`
}

func (*StorageData_Identifier) isStorageData_Data() {}

func (*StorageData_Storage) isStorageData_Data() {}

type GPUData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*GPUData_Identifier
	//	*GPUData_Gpu
	Data isGPUData_Data `protobuf_oneof:"data"`
}

func (x *GPUData) Reset() {
	*x = GPUData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUData) ProtoMessage() {}

func (x *GPUData) ProtoReflect() protoreflect.Message {
	mi := &file_goat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUData.ProtoReflect.Descriptor instead.
func (*GPUData) Descriptor() ([]byte, []int) {
	return file_goat_proto_rawDescGZIP(), []int{7}
}

func (m *GPUData) GetData() isGPUData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *GPUData) GetIdentifier() string {
	if x, ok := x.GetData().(*GPUData_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (x *GPUData) GetGpu() *GPURecord {
	if x, ok := x.GetData().(*GPUData_Gpu); ok {
		return x.Gpu
	}
	return nil
}

type isGPUData_Data interface {
	isGPUData_Data()
}

type GPUData_Identifier struct {
	// identifier MUST be the first message of the stream
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type GPUData_Gpu struct {
	Gpu *GPURecord `protobuf:"bytes,2,opt,name=gpu,proto3,oneof"`
}

func (*GPUData_Identifier) isGPUData_Data() {}

func (*GPUData_Gpu) isGPUData_Data() {}

var File_goat_proto protoreflect.FileDescriptor

var file_goat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x6f,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x0b, 0x0a, 0x08, 0x56, 0x6d, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x66,
	0x71, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x71, 0x61, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77,
	0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x63,
	0x70, 0x75, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x70,
	0x75, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x70,
	0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x47,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x08, 0x49, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x71, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xee, 0x09, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x45, 0x0a, 0x0f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x1b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x19, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa1, 0x06, 0x0a, 0x09, 0x47,
	0x50, 0x55, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x52, 0x0a, 0x16,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x49, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x71, 0x61, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x66, 0x71, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x59,
	0x0a, 0x06, 0x56, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x02, 0x76, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x02, 0x76,
	0x6d, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x06, 0x49, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x07, 0x47, 0x50, 0x55, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x03, 0x67, 0x70, 0x75, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x8b, 0x02, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x56, 0x6d, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70,
	0x73, 0x12, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x43,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x01, 0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x47, 0x50,
	0x55, 0x73, 0x12, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x50, 0x55, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01,
	0x42, 0x10, 0x5a, 0x0e, 0x67, 0x6f, 0x61, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67,
	0x6f, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goat_proto_rawDescOnce sync.Once
	file_goat_proto_rawDescData = file_goat_proto_rawDesc
)

func file_goat_proto_rawDescGZIP() []byte {
	file_goat_proto_rawDescOnce.Do(func() {
		file_goat_proto_rawDescData = protoimpl.X.CompressGZIP(file_goat_proto_rawDescData)
	})
	return file_goat_proto_rawDescData
}

var file_goat_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_goat_proto_goTypes = []interface{}{
	(*VmRecord)(nil),               // 0: goat_grpc.VmRecord
	(*IpRecord)(nil),               // 1: goat_grpc.IpRecord
	(*StorageRecord)(nil),          // 2: goat_grpc.StorageRecord
	(*GPURecord)(nil),              // 3: goat_grpc.GPURecord
	(*VmData)(nil),                 // 4: goat_grpc.VmData
	(*IpData)(nil),                 // 5: goat_grpc.IpData
	(*StorageData)(nil),            // 6: goat_grpc.StorageData
	(*GPUData)(nil),                // 7: goat_grpc.GPUData
	(*wrapperspb.StringValue)(nil), // 8: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 10: google.protobuf.Duration
	(*wrapperspb.UInt64Value)(nil), // 11: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),  // 12: google.protobuf.FloatValue
	(*emptypb.Empty)(nil),          // 13: google.protobuf.Empty
}
var file_goat_proto_depIdxs = []int32{
	8,  // 0: goat_grpc.VmRecord.cloud_compute_service:type_name -> google.protobuf.StringValue
	8,  // 1: goat_grpc.VmRecord.local_user_id:type_name -> google.protobuf.StringValue
	8,  // 2: goat_grpc.VmRecord.local_group_id:type_name -> google.protobuf.StringValue
	8,  // 3: goat_grpc.VmRecord.global_user_name:type_name -> google.protobuf.StringValue
	8,  // 4: goat_grpc.VmRecord.fqan:type_name -> google.protobuf.StringValue
	8,  // 5: goat_grpc.VmRecord.status:type_name -> google.protobuf.StringValue
	9,  // 6: goat_grpc.VmRecord.start_time:type_name -> google.protobuf.Timestamp
	9,  // 7: goat_grpc.VmRecord.end_time:type_name -> google.protobuf.Timestamp
	10, // 8: goat_grpc.VmRecord.suspend_duration:type_name -> google.protobuf.Duration
	10, // 9: goat_grpc.VmRecord.wall_duration:type_name -> google.protobuf.Duration
	10, // 10: goat_grpc.VmRecord.cpu_duration:type_name -> google.protobuf.Duration
	8,  // 11: goat_grpc.VmRecord.network_type:type_name -> google.protobuf.StringValue
	11, // 12: goat_grpc.VmRecord.network_inbound:type_name -> google.protobuf.UInt64Value
	11, // 13: goat_grpc.VmRecord.network_outbound:type_name -> google.protobuf.UInt64Value
	11, // 14: goat_grpc.VmRecord.public_ip_count:type_name -> google.protobuf.UInt64Value
	11, // 15: goat_grpc.VmRecord.memory:type_name -> google.protobuf.UInt64Value
	11, // 16: goat_grpc.VmRecord.disk:type_name -> google.protobuf.UInt64Value
	8,  // 17: goat_grpc.VmRecord.benchmark_type:type_name -> google.protobuf.StringValue
	12, // 18: goat_grpc.VmRecord.benchmark:type_name -> google.protobuf.FloatValue
	8,  // 19: goat_grpc.VmRecord.storage_record_id:type_name -> google.protobuf.StringValue
	8,  // 20: goat_grpc.VmRecord.image_id:type_name -> google.protobuf.StringValue
	8,  // 21: goat_grpc.VmRecord.cloud_type:type_name -> google.protobuf.StringValue
	9,  // 22: goat_grpc.IpRecord.measurement_time:type_name -> google.protobuf.Timestamp
	8,  // 23: goat_grpc.IpRecord.cloud_compute_service:type_name -> google.protobuf.StringValue
	9,  // 24: goat_grpc.StorageRecord.create_time:type_name -> google.protobuf.Timestamp
	8,  // 25: goat_grpc.StorageRecord.site:type_name -> google.protobuf.StringValue
	8,  // 26: goat_grpc.StorageRecord.storage_share:type_name -> google.protobuf.StringValue
	8,  // 27: goat_grpc.StorageRecord.storage_media:type_name -> google.protobuf.StringValue
	8,  // 28: goat_grpc.StorageRecord.storage_class:type_name -> google.protobuf.StringValue
	8,  // 29: goat_grpc.StorageRecord.file_count:type_name -> google.protobuf.StringValue
	8,  // 30: goat_grpc.StorageRecord.directory_path:type_name -> google.protobuf.StringValue
	8,  // 31: goat_grpc.StorageRecord.local_user:type_name -> google.protobuf.StringValue
	8,  // 32: goat_grpc.StorageRecord.local_group:type_name -> google.protobuf.StringValue
	8,  // 33: goat_grpc.StorageRecord.user_identity:type_name -> google.protobuf.StringValue
	8,  // 34: goat_grpc.StorageRecord.group:type_name -> google.protobuf.StringValue
	8,  // 35: goat_grpc.StorageRecord.group_attribute:type_name -> google.protobuf.StringValue
	8,  // 36: goat_grpc.StorageRecord.group_attribute_type:type_name -> google.protobuf.StringValue
	9,  // 37: goat_grpc.StorageRecord.start_time:type_name -> google.protobuf.Timestamp
	9,  // 38: goat_grpc.StorageRecord.end_time:type_name -> google.protobuf.Timestamp
	11, // 39: goat_grpc.StorageRecord.logical_capacity_used:type_name -> google.protobuf.UInt64Value
	11, // 40: goat_grpc.StorageRecord.resource_capacity_allocated:type_name -> google.protobuf.UInt64Value
	11, // 41: goat_grpc.GPURecord.measurement_month:type_name -> google.protobuf.UInt64Value
	11, // 42: goat_grpc.GPURecord.measurement_year:type_name -> google.protobuf.UInt64Value
	8,  // 43: goat_grpc.GPURecord.associated_record_type:type_name -> google.protobuf.StringValue
	8,  // 44: goat_grpc.GPURecord.associated_record:type_name -> google.protobuf.StringValue
	8,  // 45: goat_grpc.GPURecord.fqan:type_name -> google.protobuf.StringValue
	8,  // 46: goat_grpc.GPURecord.site_name:type_name -> google.protobuf.StringValue
	12, // 47: goat_grpc.GPURecord.count:type_name -> google.protobuf.FloatValue
	11, // 48: goat_grpc.GPURecord.available_duration:type_name -> google.protobuf.UInt64Value
	8,  // 49: goat_grpc.GPURecord.type:type_name -> google.protobuf.StringValue
	0,  // 50: goat_grpc.VmData.vm:type_name -> goat_grpc.VmRecord
	1,  // 51: goat_grpc.IpData.ip:type_name -> goat_grpc.IpRecord
	2,  // 52: goat_grpc.StorageData.storage:type_name -> goat_grpc.StorageRecord
	3,  // 53: goat_grpc.GPUData.gpu:type_name -> goat_grpc.GPURecord
	4,  // 54: goat_grpc.AccountingService.ProcessVms:input_type -> goat_grpc.VmData
	5,  // 55: goat_grpc.AccountingService.ProcessIps:input_type -> goat_grpc.IpData
	6,  // 56: goat_grpc.AccountingService.ProcessStorages:input_type -> goat_grpc.StorageData
	7,  // 57: goat_grpc.AccountingService.ProcessGPUs:input_type -> goat_grpc.GPUData
	13, // 58: goat_grpc.AccountingService.ProcessVms:output_type -> google.protobuf.Empty
	13, // 59: goat_grpc.AccountingService.ProcessIps:output_type -> google.protobuf.Empty
	13, // 60: goat_grpc.AccountingService.ProcessStorages:output_type -> google.protobuf.Empty
	13, // 61: goat_grpc.AccountingService.ProcessGPUs:output_type -> google.protobuf.Empty
	58, // [58:62] is the sub-list for method output_type
	54, // [54:58] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_goat_proto_init() }
func file_goat_proto_init() {
	if File_goat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPURecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_goat_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*VmData_Identifier)(nil),
		(*VmData_Vm)(nil),
	}
	file_goat_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*IpData_Identifier)(nil),
		(*IpData_Ip)(nil),
	}
	file_goat_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*StorageData_Identifier)(nil),
		(*StorageData_Storage)(nil),
	}
	file_goat_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GPUData_Identifier)(nil),
		(*GPUData_Gpu)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_goat_proto_goTypes,
		DependencyIndexes: file_goat_proto_depIdxs,
		MessageInfos:      file_goat_proto_msgTypes,
	}.Build()
	File_goat_proto = out.File
	file_goat_proto_rawDesc = nil
	file_goat_proto_goTypes = nil
	file_goat_proto_depIdxs = nil
}
