// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goat.proto

package goat_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Confirmation struct {
	// if accepted == false, server rejected data from the client
	Accepted bool `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	// filled only if accepted == false, empty string otherwise
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Confirmation) Reset()         { *m = Confirmation{} }
func (m *Confirmation) String() string { return proto.CompactTextString(m) }
func (*Confirmation) ProtoMessage()    {}
func (*Confirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_bc14217c490c53f1, []int{0}
}
func (m *Confirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Confirmation.Unmarshal(m, b)
}
func (m *Confirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Confirmation.Marshal(b, m, deterministic)
}
func (dst *Confirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Confirmation.Merge(dst, src)
}
func (m *Confirmation) XXX_Size() int {
	return xxx_messageInfo_Confirmation.Size(m)
}
func (m *Confirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_Confirmation.DiscardUnknown(m)
}

var xxx_messageInfo_Confirmation proto.InternalMessageInfo

func (m *Confirmation) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func (m *Confirmation) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type VmRecord struct {
	VmUuid               string                `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	SiteName             string                `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	CloudComputeService  *wrappers.StringValue `protobuf:"bytes,3,opt,name=cloud_compute_service,json=cloudComputeService,proto3" json:"cloud_compute_service,omitempty"`
	MachineName          string                `protobuf:"bytes,4,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"`
	LocalUserId          *wrappers.StringValue `protobuf:"bytes,5,opt,name=local_user_id,json=localUserId,proto3" json:"local_user_id,omitempty"`
	LocalGroupId         *wrappers.StringValue `protobuf:"bytes,6,opt,name=local_group_id,json=localGroupId,proto3" json:"local_group_id,omitempty"`
	GlobalUserName       *wrappers.StringValue `protobuf:"bytes,7,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                 *wrappers.StringValue `protobuf:"bytes,8,opt,name=fqan,proto3" json:"fqan,omitempty"`
	Status               *wrappers.StringValue `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	StartTime            *timestamp.Timestamp  `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp  `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SuspendDuration      *duration.Duration    `protobuf:"bytes,12,opt,name=suspend_duration,json=suspendDuration,proto3" json:"suspend_duration,omitempty"`
	WallDuration         *duration.Duration    `protobuf:"bytes,13,opt,name=wall_duration,json=wallDuration,proto3" json:"wall_duration,omitempty"`
	CpuDuration          *duration.Duration    `protobuf:"bytes,14,opt,name=cpu_duration,json=cpuDuration,proto3" json:"cpu_duration,omitempty"`
	CpuCount             uint32                `protobuf:"varint,15,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	NetworkType          *wrappers.StringValue `protobuf:"bytes,16,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	NetworkInbound       *wrappers.UInt64Value `protobuf:"bytes,17,opt,name=network_inbound,json=networkInbound,proto3" json:"network_inbound,omitempty"`
	NetworkOutbound      *wrappers.UInt64Value `protobuf:"bytes,18,opt,name=network_outbound,json=networkOutbound,proto3" json:"network_outbound,omitempty"`
	PublicIpCount        *wrappers.UInt64Value `protobuf:"bytes,19,opt,name=public_ip_count,json=publicIpCount,proto3" json:"public_ip_count,omitempty"`
	Memory               *wrappers.UInt64Value `protobuf:"bytes,20,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk                 *wrappers.UInt64Value `protobuf:"bytes,21,opt,name=disk,proto3" json:"disk,omitempty"`
	BenchmarkType        *wrappers.StringValue `protobuf:"bytes,22,opt,name=benchmark_type,json=benchmarkType,proto3" json:"benchmark_type,omitempty"`
	Benchmark            *wrappers.FloatValue  `protobuf:"bytes,23,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	StorageRecordId      *wrappers.StringValue `protobuf:"bytes,24,opt,name=storage_record_id,json=storageRecordId,proto3" json:"storage_record_id,omitempty"`
	ImageId              *wrappers.StringValue `protobuf:"bytes,25,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	CloudType            *wrappers.StringValue `protobuf:"bytes,26,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VmRecord) Reset()         { *m = VmRecord{} }
func (m *VmRecord) String() string { return proto.CompactTextString(m) }
func (*VmRecord) ProtoMessage()    {}
func (*VmRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_bc14217c490c53f1, []int{1}
}
func (m *VmRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRecord.Unmarshal(m, b)
}
func (m *VmRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRecord.Marshal(b, m, deterministic)
}
func (dst *VmRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRecord.Merge(dst, src)
}
func (m *VmRecord) XXX_Size() int {
	return xxx_messageInfo_VmRecord.Size(m)
}
func (m *VmRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VmRecord proto.InternalMessageInfo

func (m *VmRecord) GetVmUuid() string {
	if m != nil {
		return m.VmUuid
	}
	return ""
}

func (m *VmRecord) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *VmRecord) GetCloudComputeService() *wrappers.StringValue {
	if m != nil {
		return m.CloudComputeService
	}
	return nil
}

func (m *VmRecord) GetMachineName() string {
	if m != nil {
		return m.MachineName
	}
	return ""
}

func (m *VmRecord) GetLocalUserId() *wrappers.StringValue {
	if m != nil {
		return m.LocalUserId
	}
	return nil
}

func (m *VmRecord) GetLocalGroupId() *wrappers.StringValue {
	if m != nil {
		return m.LocalGroupId
	}
	return nil
}

func (m *VmRecord) GetGlobalUserName() *wrappers.StringValue {
	if m != nil {
		return m.GlobalUserName
	}
	return nil
}

func (m *VmRecord) GetFqan() *wrappers.StringValue {
	if m != nil {
		return m.Fqan
	}
	return nil
}

func (m *VmRecord) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VmRecord) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *VmRecord) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *VmRecord) GetSuspendDuration() *duration.Duration {
	if m != nil {
		return m.SuspendDuration
	}
	return nil
}

func (m *VmRecord) GetWallDuration() *duration.Duration {
	if m != nil {
		return m.WallDuration
	}
	return nil
}

func (m *VmRecord) GetCpuDuration() *duration.Duration {
	if m != nil {
		return m.CpuDuration
	}
	return nil
}

func (m *VmRecord) GetCpuCount() uint32 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *VmRecord) GetNetworkType() *wrappers.StringValue {
	if m != nil {
		return m.NetworkType
	}
	return nil
}

func (m *VmRecord) GetNetworkInbound() *wrappers.UInt64Value {
	if m != nil {
		return m.NetworkInbound
	}
	return nil
}

func (m *VmRecord) GetNetworkOutbound() *wrappers.UInt64Value {
	if m != nil {
		return m.NetworkOutbound
	}
	return nil
}

func (m *VmRecord) GetPublicIpCount() *wrappers.UInt64Value {
	if m != nil {
		return m.PublicIpCount
	}
	return nil
}

func (m *VmRecord) GetMemory() *wrappers.UInt64Value {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *VmRecord) GetDisk() *wrappers.UInt64Value {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *VmRecord) GetBenchmarkType() *wrappers.StringValue {
	if m != nil {
		return m.BenchmarkType
	}
	return nil
}

func (m *VmRecord) GetBenchmark() *wrappers.FloatValue {
	if m != nil {
		return m.Benchmark
	}
	return nil
}

func (m *VmRecord) GetStorageRecordId() *wrappers.StringValue {
	if m != nil {
		return m.StorageRecordId
	}
	return nil
}

func (m *VmRecord) GetImageId() *wrappers.StringValue {
	if m != nil {
		return m.ImageId
	}
	return nil
}

func (m *VmRecord) GetCloudType() *wrappers.StringValue {
	if m != nil {
		return m.CloudType
	}
	return nil
}

type IpRecord struct {
	MeasurementTime      *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=measurement_time,json=measurementTime,proto3" json:"measurement_time,omitempty"`
	SiteName             string                `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	CloudComputeService  *wrappers.StringValue `protobuf:"bytes,3,opt,name=cloud_compute_service,json=cloudComputeService,proto3" json:"cloud_compute_service,omitempty"`
	CloudType            string                `protobuf:"bytes,4,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	LocalUser            string                `protobuf:"bytes,5,opt,name=local_user,json=localUser,proto3" json:"local_user,omitempty"`
	LocalGroup           string                `protobuf:"bytes,6,opt,name=local_group,json=localGroup,proto3" json:"local_group,omitempty"`
	GlobalUserName       string                `protobuf:"bytes,7,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                 string                `protobuf:"bytes,8,opt,name=fqan,proto3" json:"fqan,omitempty"`
	IpType               string                `protobuf:"bytes,9,opt,name=ip_type,json=ipType,proto3" json:"ip_type,omitempty"`
	IpCount              uint32                `protobuf:"varint,10,opt,name=ip_count,json=ipCount,proto3" json:"ip_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IpRecord) Reset()         { *m = IpRecord{} }
func (m *IpRecord) String() string { return proto.CompactTextString(m) }
func (*IpRecord) ProtoMessage()    {}
func (*IpRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_bc14217c490c53f1, []int{2}
}
func (m *IpRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpRecord.Unmarshal(m, b)
}
func (m *IpRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpRecord.Marshal(b, m, deterministic)
}
func (dst *IpRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpRecord.Merge(dst, src)
}
func (m *IpRecord) XXX_Size() int {
	return xxx_messageInfo_IpRecord.Size(m)
}
func (m *IpRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_IpRecord.DiscardUnknown(m)
}

var xxx_messageInfo_IpRecord proto.InternalMessageInfo

func (m *IpRecord) GetMeasurementTime() *timestamp.Timestamp {
	if m != nil {
		return m.MeasurementTime
	}
	return nil
}

func (m *IpRecord) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *IpRecord) GetCloudComputeService() *wrappers.StringValue {
	if m != nil {
		return m.CloudComputeService
	}
	return nil
}

func (m *IpRecord) GetCloudType() string {
	if m != nil {
		return m.CloudType
	}
	return ""
}

func (m *IpRecord) GetLocalUser() string {
	if m != nil {
		return m.LocalUser
	}
	return ""
}

func (m *IpRecord) GetLocalGroup() string {
	if m != nil {
		return m.LocalGroup
	}
	return ""
}

func (m *IpRecord) GetGlobalUserName() string {
	if m != nil {
		return m.GlobalUserName
	}
	return ""
}

func (m *IpRecord) GetFqan() string {
	if m != nil {
		return m.Fqan
	}
	return ""
}

func (m *IpRecord) GetIpType() string {
	if m != nil {
		return m.IpType
	}
	return ""
}

func (m *IpRecord) GetIpCount() uint32 {
	if m != nil {
		return m.IpCount
	}
	return 0
}

type StorageRecord struct {
	RecordID                  string                `protobuf:"bytes,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	CreateTime                *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StorageSystem             string                `protobuf:"bytes,3,opt,name=storage_system,json=storageSystem,proto3" json:"storage_system,omitempty"`
	Site                      *wrappers.StringValue `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	StorageShare              *wrappers.StringValue `protobuf:"bytes,5,opt,name=storage_share,json=storageShare,proto3" json:"storage_share,omitempty"`
	StorageMedia              *wrappers.StringValue `protobuf:"bytes,6,opt,name=storage_media,json=storageMedia,proto3" json:"storage_media,omitempty"`
	StorageClass              *wrappers.StringValue `protobuf:"bytes,7,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	FileCount                 *wrappers.StringValue `protobuf:"bytes,8,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	DirectoryPath             *wrappers.StringValue `protobuf:"bytes,9,opt,name=directory_path,json=directoryPath,proto3" json:"directory_path,omitempty"`
	LocalUser                 *wrappers.StringValue `protobuf:"bytes,10,opt,name=local_user,json=localUser,proto3" json:"local_user,omitempty"`
	LocalGroup                *wrappers.StringValue `protobuf:"bytes,11,opt,name=local_group,json=localGroup,proto3" json:"local_group,omitempty"`
	UserIdentity              *wrappers.StringValue `protobuf:"bytes,12,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	Group                     *wrappers.StringValue `protobuf:"bytes,13,opt,name=group,proto3" json:"group,omitempty"`
	GroupAttribute            *wrappers.StringValue `protobuf:"bytes,14,opt,name=group_attribute,json=groupAttribute,proto3" json:"group_attribute,omitempty"`
	GroupAttributeType        *wrappers.StringValue `protobuf:"bytes,15,opt,name=group_attribute_type,json=groupAttributeType,proto3" json:"group_attribute_type,omitempty"`
	StartTime                 *timestamp.Timestamp  `protobuf:"bytes,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                   *timestamp.Timestamp  `protobuf:"bytes,17,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ResourceCapacityUsed      uint64                `protobuf:"varint,18,opt,name=resource_capacity_used,json=resourceCapacityUsed,proto3" json:"resource_capacity_used,omitempty"`
	LogicalCapacityUsed       *wrappers.UInt64Value `protobuf:"bytes,19,opt,name=logical_capacity_used,json=logicalCapacityUsed,proto3" json:"logical_capacity_used,omitempty"`
	ResourceCapacityAllocated *wrappers.UInt64Value `protobuf:"bytes,20,opt,name=resource_capacity_allocated,json=resourceCapacityAllocated,proto3" json:"resource_capacity_allocated,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}              `json:"-"`
	XXX_unrecognized          []byte                `json:"-"`
	XXX_sizecache             int32                 `json:"-"`
}

func (m *StorageRecord) Reset()         { *m = StorageRecord{} }
func (m *StorageRecord) String() string { return proto.CompactTextString(m) }
func (*StorageRecord) ProtoMessage()    {}
func (*StorageRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_bc14217c490c53f1, []int{3}
}
func (m *StorageRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageRecord.Unmarshal(m, b)
}
func (m *StorageRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageRecord.Marshal(b, m, deterministic)
}
func (dst *StorageRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageRecord.Merge(dst, src)
}
func (m *StorageRecord) XXX_Size() int {
	return xxx_messageInfo_StorageRecord.Size(m)
}
func (m *StorageRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StorageRecord proto.InternalMessageInfo

func (m *StorageRecord) GetRecordID() string {
	if m != nil {
		return m.RecordID
	}
	return ""
}

func (m *StorageRecord) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *StorageRecord) GetStorageSystem() string {
	if m != nil {
		return m.StorageSystem
	}
	return ""
}

func (m *StorageRecord) GetSite() *wrappers.StringValue {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *StorageRecord) GetStorageShare() *wrappers.StringValue {
	if m != nil {
		return m.StorageShare
	}
	return nil
}

func (m *StorageRecord) GetStorageMedia() *wrappers.StringValue {
	if m != nil {
		return m.StorageMedia
	}
	return nil
}

func (m *StorageRecord) GetStorageClass() *wrappers.StringValue {
	if m != nil {
		return m.StorageClass
	}
	return nil
}

func (m *StorageRecord) GetFileCount() *wrappers.StringValue {
	if m != nil {
		return m.FileCount
	}
	return nil
}

func (m *StorageRecord) GetDirectoryPath() *wrappers.StringValue {
	if m != nil {
		return m.DirectoryPath
	}
	return nil
}

func (m *StorageRecord) GetLocalUser() *wrappers.StringValue {
	if m != nil {
		return m.LocalUser
	}
	return nil
}

func (m *StorageRecord) GetLocalGroup() *wrappers.StringValue {
	if m != nil {
		return m.LocalGroup
	}
	return nil
}

func (m *StorageRecord) GetUserIdentity() *wrappers.StringValue {
	if m != nil {
		return m.UserIdentity
	}
	return nil
}

func (m *StorageRecord) GetGroup() *wrappers.StringValue {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *StorageRecord) GetGroupAttribute() *wrappers.StringValue {
	if m != nil {
		return m.GroupAttribute
	}
	return nil
}

func (m *StorageRecord) GetGroupAttributeType() *wrappers.StringValue {
	if m != nil {
		return m.GroupAttributeType
	}
	return nil
}

func (m *StorageRecord) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StorageRecord) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *StorageRecord) GetResourceCapacityUsed() uint64 {
	if m != nil {
		return m.ResourceCapacityUsed
	}
	return 0
}

func (m *StorageRecord) GetLogicalCapacityUsed() *wrappers.UInt64Value {
	if m != nil {
		return m.LogicalCapacityUsed
	}
	return nil
}

func (m *StorageRecord) GetResourceCapacityAllocated() *wrappers.UInt64Value {
	if m != nil {
		return m.ResourceCapacityAllocated
	}
	return nil
}

type VmRecords struct {
	Identifier           string    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Vm                   *VmRecord `protobuf:"bytes,2,opt,name=vm,proto3" json:"vm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VmRecords) Reset()         { *m = VmRecords{} }
func (m *VmRecords) String() string { return proto.CompactTextString(m) }
func (*VmRecords) ProtoMessage()    {}
func (*VmRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_bc14217c490c53f1, []int{4}
}
func (m *VmRecords) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRecords.Unmarshal(m, b)
}
func (m *VmRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRecords.Marshal(b, m, deterministic)
}
func (dst *VmRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRecords.Merge(dst, src)
}
func (m *VmRecords) XXX_Size() int {
	return xxx_messageInfo_VmRecords.Size(m)
}
func (m *VmRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRecords.DiscardUnknown(m)
}

var xxx_messageInfo_VmRecords proto.InternalMessageInfo

func (m *VmRecords) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *VmRecords) GetVm() *VmRecord {
	if m != nil {
		return m.Vm
	}
	return nil
}

type IpRecords struct {
	Identifier           string    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Ip                   *IpRecord `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *IpRecords) Reset()         { *m = IpRecords{} }
func (m *IpRecords) String() string { return proto.CompactTextString(m) }
func (*IpRecords) ProtoMessage()    {}
func (*IpRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_bc14217c490c53f1, []int{5}
}
func (m *IpRecords) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpRecords.Unmarshal(m, b)
}
func (m *IpRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpRecords.Marshal(b, m, deterministic)
}
func (dst *IpRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpRecords.Merge(dst, src)
}
func (m *IpRecords) XXX_Size() int {
	return xxx_messageInfo_IpRecords.Size(m)
}
func (m *IpRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_IpRecords.DiscardUnknown(m)
}

var xxx_messageInfo_IpRecords proto.InternalMessageInfo

func (m *IpRecords) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *IpRecords) GetIp() *IpRecord {
	if m != nil {
		return m.Ip
	}
	return nil
}

type StorageRecords struct {
	Identifier           string         `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Storage              *StorageRecord `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StorageRecords) Reset()         { *m = StorageRecords{} }
func (m *StorageRecords) String() string { return proto.CompactTextString(m) }
func (*StorageRecords) ProtoMessage()    {}
func (*StorageRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_bc14217c490c53f1, []int{6}
}
func (m *StorageRecords) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageRecords.Unmarshal(m, b)
}
func (m *StorageRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageRecords.Marshal(b, m, deterministic)
}
func (dst *StorageRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageRecords.Merge(dst, src)
}
func (m *StorageRecords) XXX_Size() int {
	return xxx_messageInfo_StorageRecords.Size(m)
}
func (m *StorageRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageRecords.DiscardUnknown(m)
}

var xxx_messageInfo_StorageRecords proto.InternalMessageInfo

func (m *StorageRecords) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *StorageRecords) GetStorage() *StorageRecord {
	if m != nil {
		return m.Storage
	}
	return nil
}

func init() {
	proto.RegisterType((*Confirmation)(nil), "goat_grpc.Confirmation")
	proto.RegisterType((*VmRecord)(nil), "goat_grpc.VmRecord")
	proto.RegisterType((*IpRecord)(nil), "goat_grpc.IpRecord")
	proto.RegisterType((*StorageRecord)(nil), "goat_grpc.StorageRecord")
	proto.RegisterType((*VmRecords)(nil), "goat_grpc.VmRecords")
	proto.RegisterType((*IpRecords)(nil), "goat_grpc.IpRecords")
	proto.RegisterType((*StorageRecords)(nil), "goat_grpc.StorageRecords")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountingServiceClient interface {
	ProcessVms(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessVmsClient, error)
	ProcessIps(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessIpsClient, error)
	ProcessStorage(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessStorageClient, error)
}

type accountingServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountingServiceClient(cc *grpc.ClientConn) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) ProcessVms(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessVmsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountingService_serviceDesc.Streams[0], "/goat_grpc.AccountingService/ProcessVms", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessVmsClient{stream}
	return x, nil
}

type AccountingService_ProcessVmsClient interface {
	Send(*VmRecords) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessVmsClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessVmsClient) Send(m *VmRecords) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessVmsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountingServiceClient) ProcessIps(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessIpsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountingService_serviceDesc.Streams[1], "/goat_grpc.AccountingService/ProcessIps", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessIpsClient{stream}
	return x, nil
}

type AccountingService_ProcessIpsClient interface {
	Send(*IpRecords) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessIpsClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessIpsClient) Send(m *IpRecords) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessIpsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountingServiceClient) ProcessStorage(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessStorageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountingService_serviceDesc.Streams[2], "/goat_grpc.AccountingService/ProcessStorage", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessStorageClient{stream}
	return x, nil
}

type AccountingService_ProcessStorageClient interface {
	Send(*StorageRecords) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessStorageClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessStorageClient) Send(m *StorageRecords) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessStorageClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountingServiceServer is the server API for AccountingService service.
type AccountingServiceServer interface {
	ProcessVms(AccountingService_ProcessVmsServer) error
	ProcessIps(AccountingService_ProcessIpsServer) error
	ProcessStorage(AccountingService_ProcessStorageServer) error
}

func RegisterAccountingServiceServer(s *grpc.Server, srv AccountingServiceServer) {
	s.RegisterService(&_AccountingService_serviceDesc, srv)
}

func _AccountingService_ProcessVms_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessVms(&accountingServiceProcessVmsServer{stream})
}

type AccountingService_ProcessVmsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*VmRecords, error)
	grpc.ServerStream
}

type accountingServiceProcessVmsServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessVmsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessVmsServer) Recv() (*VmRecords, error) {
	m := new(VmRecords)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AccountingService_ProcessIps_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessIps(&accountingServiceProcessIpsServer{stream})
}

type AccountingService_ProcessIpsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*IpRecords, error)
	grpc.ServerStream
}

type accountingServiceProcessIpsServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessIpsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessIpsServer) Recv() (*IpRecords, error) {
	m := new(IpRecords)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AccountingService_ProcessStorage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessStorage(&accountingServiceProcessStorageServer{stream})
}

type AccountingService_ProcessStorageServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*StorageRecords, error)
	grpc.ServerStream
}

type accountingServiceProcessStorageServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessStorageServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessStorageServer) Recv() (*StorageRecords, error) {
	m := new(StorageRecords)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AccountingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goat_grpc.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessVms",
			Handler:       _AccountingService_ProcessVms_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessIps",
			Handler:       _AccountingService_ProcessIps_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessStorage",
			Handler:       _AccountingService_ProcessStorage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "goat.proto",
}

func init() { proto.RegisterFile("goat.proto", fileDescriptor_goat_bc14217c490c53f1) }

var fileDescriptor_goat_bc14217c490c53f1 = []byte{
	// 1228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0xdd, 0x6e, 0xdb, 0x36,
	0x1b, 0xc7, 0xe1, 0xb4, 0x8d, 0xad, 0xc7, 0x9f, 0x61, 0xd2, 0x56, 0x49, 0xde, 0xb7, 0xcd, 0x32,
	0x0c, 0xc8, 0x51, 0x3a, 0x64, 0xd9, 0x86, 0xa2, 0xdd, 0x47, 0xe6, 0xa4, 0x9d, 0x0f, 0xd6, 0x05,
	0x4a, 0xd3, 0xa3, 0x01, 0x02, 0x2d, 0x31, 0x0e, 0x51, 0x49, 0xe4, 0x48, 0x2a, 0x85, 0x2f, 0x63,
	0x37, 0xb7, 0xcb, 0xd8, 0x1d, 0x0c, 0x18, 0xf8, 0x21, 0x5b, 0x8e, 0x9b, 0x9a, 0xd8, 0xc1, 0xce,
	0x24, 0xf2, 0xf9, 0xfd, 0x49, 0x8a, 0x0f, 0x9f, 0x3f, 0x05, 0x30, 0x61, 0x58, 0x1d, 0x72, 0xc1,
	0x14, 0x43, 0x81, 0x7e, 0x8e, 0x27, 0x82, 0x27, 0x3b, 0xbb, 0x13, 0xc6, 0x26, 0x19, 0x79, 0x66,
	0x3a, 0xc6, 0xe5, 0xd5, 0x33, 0x92, 0x73, 0x35, 0xb5, 0x71, 0x3b, 0x4f, 0x6f, 0x77, 0x2a, 0x9a,
	0x13, 0xa9, 0x70, 0xce, 0x5d, 0xc0, 0x93, 0xdb, 0x01, 0x69, 0x29, 0xb0, 0xa2, 0xac, 0xb8, 0xab,
	0xff, 0x83, 0xc0, 0x9c, 0x13, 0x21, 0x6d, 0xff, 0xfe, 0x4b, 0xe8, 0x0c, 0x59, 0x71, 0x45, 0x45,
	0x6e, 0x28, 0xb4, 0x03, 0x2d, 0x9c, 0x24, 0x84, 0x2b, 0x92, 0x86, 0x8d, 0xbd, 0xc6, 0x41, 0x2b,
	0x9a, 0xbd, 0xa3, 0x01, 0xdc, 0xcb, 0xe5, 0x24, 0x5c, 0xdb, 0x6b, 0x1c, 0x04, 0x91, 0x7e, 0xdc,
	0xff, 0xbb, 0x0d, 0xad, 0x77, 0x79, 0x44, 0x12, 0x26, 0x52, 0xf4, 0x18, 0x9a, 0x37, 0x79, 0x5c,
	0x96, 0xd4, 0x92, 0x41, 0xb4, 0x7e, 0x93, 0x5f, 0x96, 0x34, 0x45, 0xbb, 0x10, 0x48, 0xaa, 0x48,
	0x5c, 0xe0, 0x9c, 0x38, 0xba, 0xa5, 0x1b, 0xde, 0xe0, 0x9c, 0xa0, 0x73, 0x78, 0x98, 0x64, 0xac,
	0x4c, 0xe3, 0x84, 0xe5, 0xbc, 0x54, 0x24, 0x96, 0x44, 0xdc, 0xd0, 0x84, 0x84, 0xf7, 0xf6, 0x1a,
	0x07, 0xed, 0xa3, 0xff, 0x1d, 0xda, 0x05, 0x1c, 0x56, 0x0b, 0x38, 0xbc, 0x50, 0x82, 0x16, 0x93,
	0x77, 0x38, 0x2b, 0x49, 0xb4, 0x69, 0xd0, 0xa1, 0x25, 0x2f, 0x2c, 0x88, 0x3e, 0x83, 0x4e, 0x8e,
	0x93, 0x6b, 0x5a, 0xb8, 0x11, 0xef, 0x9b, 0x11, 0xdb, 0xae, 0xcd, 0x0c, 0xfa, 0x23, 0x74, 0x33,
	0x96, 0xe0, 0x2c, 0x2e, 0x25, 0x11, 0x31, 0x4d, 0xc3, 0x07, 0x1e, 0x83, 0xb5, 0x0d, 0x72, 0x29,
	0x89, 0x18, 0xa5, 0xe8, 0x27, 0xe8, 0x59, 0x85, 0x89, 0x60, 0x25, 0xd7, 0x12, 0xeb, 0x1e, 0x12,
	0x1d, 0xc3, 0xbc, 0xd6, 0xc8, 0x28, 0x45, 0xaf, 0x60, 0x30, 0xc9, 0xd8, 0xb8, 0x9a, 0x86, 0x99,
	0x6c, 0xd3, 0x43, 0xa5, 0x67, 0x29, 0x3d, 0x13, 0xb3, 0x9a, 0x2f, 0xe1, 0xfe, 0xd5, 0xef, 0xb8,
	0x08, 0x5b, 0x1e, 0xac, 0x89, 0x44, 0xc7, 0xb0, 0x2e, 0x15, 0x56, 0xa5, 0x0c, 0x03, 0x0f, 0xc6,
	0xc5, 0xa2, 0xe7, 0x00, 0x52, 0x61, 0xa1, 0x62, 0x9d, 0x84, 0x21, 0x18, 0x72, 0x67, 0x89, 0x7c,
	0x5b, 0x65, 0x68, 0x14, 0x98, 0x68, 0xfd, 0x8e, 0xbe, 0x86, 0x16, 0x29, 0x52, 0x0b, 0xb6, 0x57,
	0x82, 0x4d, 0x52, 0xa4, 0x06, 0x3b, 0x85, 0x81, 0x2c, 0x25, 0xd7, 0x68, 0x95, 0xd7, 0x61, 0xc7,
	0xe0, 0xdb, 0x4b, 0xf8, 0xa9, 0x0b, 0x88, 0xfa, 0x0e, 0xa9, 0x1a, 0xd0, 0xf7, 0xd0, 0xfd, 0x80,
	0xb3, 0x6c, 0x2e, 0xd1, 0x5d, 0x25, 0xd1, 0xd1, 0xf1, 0x33, 0xfe, 0x25, 0x74, 0x12, 0x5e, 0xce,
	0xf1, 0xde, 0x2a, 0xbc, 0x9d, 0xf0, 0x72, 0x46, 0xef, 0x42, 0xa0, 0xe9, 0x84, 0x95, 0x85, 0x0a,
	0xfb, 0x7b, 0x8d, 0x83, 0x6e, 0xd4, 0x4a, 0x78, 0x39, 0xd4, 0xef, 0xe8, 0x07, 0xe8, 0x14, 0x44,
	0x7d, 0x60, 0xe2, 0x7d, 0xac, 0xa6, 0x9c, 0x84, 0x03, 0x9f, 0x3c, 0x74, 0xc4, 0xdb, 0x29, 0x27,
	0xe8, 0x0c, 0xfa, 0x95, 0x00, 0x2d, 0xc6, 0xac, 0x2c, 0xd2, 0x70, 0xe3, 0x0e, 0x8d, 0xcb, 0x51,
	0xa1, 0xbe, 0x39, 0x76, 0x29, 0xe4, 0xa0, 0x91, 0x65, 0xd0, 0x6b, 0x18, 0x54, 0x32, 0xac, 0x54,
	0x56, 0x07, 0x79, 0xe8, 0x54, 0x83, 0xff, 0xea, 0x20, 0x74, 0x0a, 0x7d, 0x5e, 0x8e, 0x33, 0x9a,
	0xc4, 0x94, 0xbb, 0x35, 0x6f, 0x7a, 0xe8, 0x74, 0x2d, 0x34, 0xe2, 0xf6, 0xb3, 0x1c, 0xc3, 0x7a,
	0x4e, 0x72, 0x26, 0xa6, 0xe1, 0x96, 0x07, 0xec, 0x62, 0xf5, 0x39, 0x48, 0xa9, 0x7c, 0x1f, 0x3e,
	0xf4, 0x60, 0x4c, 0x24, 0x1a, 0x42, 0x6f, 0x4c, 0x8a, 0xe4, 0x3a, 0xc7, 0xd5, 0x06, 0x3c, 0xf2,
	0xd8, 0x80, 0xee, 0x8c, 0x31, 0x5b, 0xf0, 0x1c, 0x82, 0x59, 0x43, 0xf8, 0xd8, 0xf0, 0xbb, 0x4b,
	0xfc, 0xab, 0x8c, 0x61, 0x65, 0xf1, 0x79, 0x34, 0xfa, 0x19, 0x36, 0xa4, 0x62, 0x02, 0x4f, 0x48,
	0x2c, 0x4c, 0x11, 0xd5, 0x85, 0x24, 0xf4, 0x98, 0x42, 0xdf, 0x61, 0xb6, 0xf4, 0x8e, 0x52, 0xf4,
	0x2d, 0xb4, 0x68, 0xae, 0x75, 0x68, 0x1a, 0x6e, 0x7b, 0x08, 0x34, 0x4d, 0xf4, 0x28, 0x45, 0x2f,
	0x00, 0x6c, 0xfd, 0x35, 0xcb, 0xdf, 0xf1, 0x40, 0x03, 0x13, 0xaf, 0x97, 0xbe, 0xff, 0xc7, 0x3d,
	0x68, 0x8d, 0xb8, 0xab, 0xff, 0x67, 0x30, 0xc8, 0x09, 0x96, 0xa5, 0x20, 0x39, 0x29, 0x5c, 0x91,
	0x68, 0xac, 0x3c, 0xeb, 0xfd, 0x1a, 0x63, 0xce, 0xfc, 0x7f, 0xec, 0x16, 0xff, 0x5f, 0x58, 0xbf,
	0xf5, 0x8a, 0xf9, 0x0a, 0x75, 0xf7, 0xdc, 0x29, 0x8c, 0x4d, 0x04, 0x51, 0x30, 0x33, 0x02, 0xf4,
	0x14, 0xda, 0x35, 0x1b, 0x30, 0x1e, 0x10, 0x44, 0x30, 0xaf, 0xf2, 0xe8, 0xe0, 0x8e, 0x1a, 0x1f,
	0x2c, 0x55, 0x71, 0x54, 0xab, 0xe2, 0x81, 0xab, 0xd3, 0x8f, 0xa1, 0x49, 0xb9, 0x9d, 0x59, 0x60,
	0x2d, 0x95, 0x72, 0x33, 0xad, 0x6d, 0x68, 0xcd, 0xce, 0x17, 0x98, 0x9a, 0xd2, 0xa4, 0xf6, 0xec,
	0xec, 0xff, 0x15, 0x40, 0xf7, 0xa2, 0x9e, 0x1d, 0xda, 0xd3, 0x6d, 0x76, 0x8d, 0x4e, 0x9d, 0x33,
	0xcf, 0xde, 0xd1, 0x0b, 0x68, 0x27, 0x82, 0x60, 0x45, 0xec, 0x7e, 0xad, 0xad, 0xdc, 0x2f, 0xb0,
	0xe1, 0x66, 0xab, 0xbe, 0x80, 0x5e, 0x95, 0xbe, 0x72, 0x2a, 0x15, 0xc9, 0xcd, 0x36, 0x04, 0x51,
	0xd7, 0xb5, 0x5e, 0x98, 0x46, 0x7d, 0x2e, 0xf5, 0x06, 0x9a, 0x8f, 0xbb, 0xd2, 0x9f, 0x74, 0x24,
	0x3a, 0x81, 0xee, 0x4c, 0xf8, 0x1a, 0x0b, 0xe2, 0xe5, 0xcf, 0x9d, 0x6a, 0x54, 0x4d, 0xd4, 0x25,
	0x72, 0x92, 0x52, 0xec, 0xe7, 0xcf, 0x0e, 0xf9, 0x45, 0x13, 0x75, 0x89, 0x24, 0xc3, 0x52, 0x7a,
	0x99, 0x73, 0x25, 0x31, 0xd4, 0x84, 0x3e, 0x5d, 0x57, 0x34, 0x23, 0x6e, 0xa7, 0x7c, 0x0c, 0x3a,
	0xd0, 0xf1, 0xb6, 0x0a, 0x0e, 0xa1, 0x97, 0x52, 0x41, 0x12, 0xc5, 0xc4, 0x34, 0xe6, 0x58, 0x5d,
	0x7b, 0xb9, 0x75, 0x77, 0xc6, 0x9c, 0x63, 0x75, 0xad, 0x67, 0x50, 0x4b, 0x60, 0xf0, 0x99, 0xc1,
	0x3c, 0xbd, 0xbf, 0x5b, 0x4c, 0xef, 0xb6, 0x07, 0x5d, 0x4f, 0xfe, 0x13, 0xe8, 0xba, 0x0b, 0x16,
	0x29, 0x14, 0x55, 0x53, 0xe7, 0xdd, 0x2b, 0x3e, 0x60, 0x69, 0x6e, 0x58, 0x96, 0x40, 0x47, 0xf0,
	0xc0, 0x8e, 0xdd, 0xf5, 0x40, 0x6d, 0xa8, 0xf6, 0x44, 0x7b, 0x2b, 0xc3, 0x4a, 0x09, 0x3a, 0x2e,
	0x15, 0x71, 0x96, 0xbd, 0xea, 0x5a, 0xa5, 0xa1, 0x93, 0x8a, 0x41, 0x6f, 0x60, 0xeb, 0x96, 0x8c,
	0x3d, 0x89, 0x7d, 0x0f, 0x2d, 0xb4, 0xa8, 0xe5, 0x7c, 0xa2, 0x7e, 0x7d, 0x1a, 0xfc, 0xdb, 0xeb,
	0xd3, 0x86, 0xff, 0xf5, 0xe9, 0x18, 0x1e, 0x09, 0x22, 0x59, 0x29, 0x12, 0x12, 0x27, 0x98, 0xe3,
	0x84, 0xaa, 0xa9, 0xce, 0x03, 0xeb, 0xed, 0xf7, 0xa3, 0xad, 0xaa, 0x77, 0xe8, 0x3a, 0x2f, 0x25,
	0x49, 0x75, 0x8d, 0xcd, 0xd8, 0x84, 0xea, 0x6d, 0x5f, 0x84, 0x7c, 0x8c, 0x7c, 0xd3, 0xa1, 0x0b,
	0x8a, 0xbf, 0xc1, 0xee, 0xf2, 0x3c, 0x70, 0xa6, 0x33, 0x45, 0xff, 0x67, 0xf8, 0x78, 0xfc, 0xf6,
	0xed, 0xa9, 0x9e, 0x54, 0xf8, 0xfe, 0x39, 0x04, 0xd5, 0x3f, 0x88, 0x44, 0x4f, 0x00, 0x6c, 0xb6,
	0x5d, 0x51, 0x22, 0x5c, 0xb5, 0xab, 0xb5, 0xa0, 0xcf, 0x61, 0xed, 0x26, 0x77, 0x65, 0x6e, 0xf3,
	0x70, 0xf6, 0x17, 0x76, 0x58, 0x29, 0x44, 0x6b, 0x37, 0xb9, 0x56, 0xac, 0x5c, 0xcd, 0x4b, 0x91,
	0xf2, 0x8f, 0x28, 0x56, 0x0a, 0xd1, 0x1a, 0xe5, 0xfb, 0x29, 0xf4, 0x16, 0x6a, 0xf2, 0x6a, 0xd9,
	0x23, 0x68, 0xba, 0x4a, 0xe2, 0xb4, 0xc3, 0x9a, 0xf6, 0x82, 0x56, 0x54, 0x05, 0x1e, 0xfd, 0xd9,
	0x80, 0x8d, 0x93, 0xc4, 0xd4, 0x1a, 0x5a, 0x4c, 0x2a, 0x87, 0x7b, 0x09, 0x70, 0x2e, 0x58, 0x42,
	0xa4, 0x7c, 0x97, 0x4b, 0xb4, 0xf5, 0x91, 0x45, 0xcb, 0x9d, 0x47, 0x4b, 0x1f, 0xff, 0x4c, 0xff,
	0x85, 0x1e, 0x34, 0x6a, 0xf4, 0x88, 0x2f, 0xd2, 0xb3, 0x4f, 0xf4, 0x09, 0xfa, 0x0c, 0x7a, 0x8e,
	0x76, 0x53, 0x46, 0xdb, 0x77, 0x2d, 0xe3, 0x13, 0x32, 0xe3, 0x75, 0xd3, 0xf2, 0xd5, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0xde, 0x95, 0x2b, 0x43, 0x0f, 0x00, 0x00,
}
