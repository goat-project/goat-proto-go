// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goat.proto

package goat_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VmRecord struct {
	VmUuid               string                `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	SiteName             string                `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	CloudComputeService  *wrappers.StringValue `protobuf:"bytes,3,opt,name=cloud_compute_service,json=cloudComputeService,proto3" json:"cloud_compute_service,omitempty"`
	MachineName          string                `protobuf:"bytes,4,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"`
	LocalUserId          *wrappers.StringValue `protobuf:"bytes,5,opt,name=local_user_id,json=localUserId,proto3" json:"local_user_id,omitempty"`
	LocalGroupId         *wrappers.StringValue `protobuf:"bytes,6,opt,name=local_group_id,json=localGroupId,proto3" json:"local_group_id,omitempty"`
	GlobalUserName       *wrappers.StringValue `protobuf:"bytes,7,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                 *wrappers.StringValue `protobuf:"bytes,8,opt,name=fqan,proto3" json:"fqan,omitempty"`
	Status               *wrappers.StringValue `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	StartTime            *timestamp.Timestamp  `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp  `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SuspendDuration      *duration.Duration    `protobuf:"bytes,12,opt,name=suspend_duration,json=suspendDuration,proto3" json:"suspend_duration,omitempty"`
	WallDuration         *duration.Duration    `protobuf:"bytes,13,opt,name=wall_duration,json=wallDuration,proto3" json:"wall_duration,omitempty"`
	CpuDuration          *duration.Duration    `protobuf:"bytes,14,opt,name=cpu_duration,json=cpuDuration,proto3" json:"cpu_duration,omitempty"`
	CpuCount             uint32                `protobuf:"varint,15,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	NetworkType          *wrappers.StringValue `protobuf:"bytes,16,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	NetworkInbound       *wrappers.UInt64Value `protobuf:"bytes,17,opt,name=network_inbound,json=networkInbound,proto3" json:"network_inbound,omitempty"`
	NetworkOutbound      *wrappers.UInt64Value `protobuf:"bytes,18,opt,name=network_outbound,json=networkOutbound,proto3" json:"network_outbound,omitempty"`
	PublicIpCount        *wrappers.UInt64Value `protobuf:"bytes,19,opt,name=public_ip_count,json=publicIpCount,proto3" json:"public_ip_count,omitempty"`
	Memory               *wrappers.UInt64Value `protobuf:"bytes,20,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk                 *wrappers.UInt64Value `protobuf:"bytes,21,opt,name=disk,proto3" json:"disk,omitempty"`
	BenchmarkType        *wrappers.StringValue `protobuf:"bytes,22,opt,name=benchmark_type,json=benchmarkType,proto3" json:"benchmark_type,omitempty"`
	Benchmark            *wrappers.FloatValue  `protobuf:"bytes,23,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	StorageRecordId      *wrappers.StringValue `protobuf:"bytes,24,opt,name=storage_record_id,json=storageRecordId,proto3" json:"storage_record_id,omitempty"`
	ImageId              *wrappers.StringValue `protobuf:"bytes,25,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	CloudType            *wrappers.StringValue `protobuf:"bytes,26,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VmRecord) Reset()         { *m = VmRecord{} }
func (m *VmRecord) String() string { return proto.CompactTextString(m) }
func (*VmRecord) ProtoMessage()    {}
func (*VmRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_b637b8af21596263, []int{0}
}
func (m *VmRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRecord.Unmarshal(m, b)
}
func (m *VmRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRecord.Marshal(b, m, deterministic)
}
func (dst *VmRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRecord.Merge(dst, src)
}
func (m *VmRecord) XXX_Size() int {
	return xxx_messageInfo_VmRecord.Size(m)
}
func (m *VmRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VmRecord proto.InternalMessageInfo

func (m *VmRecord) GetVmUuid() string {
	if m != nil {
		return m.VmUuid
	}
	return ""
}

func (m *VmRecord) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *VmRecord) GetCloudComputeService() *wrappers.StringValue {
	if m != nil {
		return m.CloudComputeService
	}
	return nil
}

func (m *VmRecord) GetMachineName() string {
	if m != nil {
		return m.MachineName
	}
	return ""
}

func (m *VmRecord) GetLocalUserId() *wrappers.StringValue {
	if m != nil {
		return m.LocalUserId
	}
	return nil
}

func (m *VmRecord) GetLocalGroupId() *wrappers.StringValue {
	if m != nil {
		return m.LocalGroupId
	}
	return nil
}

func (m *VmRecord) GetGlobalUserName() *wrappers.StringValue {
	if m != nil {
		return m.GlobalUserName
	}
	return nil
}

func (m *VmRecord) GetFqan() *wrappers.StringValue {
	if m != nil {
		return m.Fqan
	}
	return nil
}

func (m *VmRecord) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VmRecord) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *VmRecord) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *VmRecord) GetSuspendDuration() *duration.Duration {
	if m != nil {
		return m.SuspendDuration
	}
	return nil
}

func (m *VmRecord) GetWallDuration() *duration.Duration {
	if m != nil {
		return m.WallDuration
	}
	return nil
}

func (m *VmRecord) GetCpuDuration() *duration.Duration {
	if m != nil {
		return m.CpuDuration
	}
	return nil
}

func (m *VmRecord) GetCpuCount() uint32 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *VmRecord) GetNetworkType() *wrappers.StringValue {
	if m != nil {
		return m.NetworkType
	}
	return nil
}

func (m *VmRecord) GetNetworkInbound() *wrappers.UInt64Value {
	if m != nil {
		return m.NetworkInbound
	}
	return nil
}

func (m *VmRecord) GetNetworkOutbound() *wrappers.UInt64Value {
	if m != nil {
		return m.NetworkOutbound
	}
	return nil
}

func (m *VmRecord) GetPublicIpCount() *wrappers.UInt64Value {
	if m != nil {
		return m.PublicIpCount
	}
	return nil
}

func (m *VmRecord) GetMemory() *wrappers.UInt64Value {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *VmRecord) GetDisk() *wrappers.UInt64Value {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *VmRecord) GetBenchmarkType() *wrappers.StringValue {
	if m != nil {
		return m.BenchmarkType
	}
	return nil
}

func (m *VmRecord) GetBenchmark() *wrappers.FloatValue {
	if m != nil {
		return m.Benchmark
	}
	return nil
}

func (m *VmRecord) GetStorageRecordId() *wrappers.StringValue {
	if m != nil {
		return m.StorageRecordId
	}
	return nil
}

func (m *VmRecord) GetImageId() *wrappers.StringValue {
	if m != nil {
		return m.ImageId
	}
	return nil
}

func (m *VmRecord) GetCloudType() *wrappers.StringValue {
	if m != nil {
		return m.CloudType
	}
	return nil
}

type IpRecord struct {
	MeasurementTime      *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=measurement_time,json=measurementTime,proto3" json:"measurement_time,omitempty"`
	SiteName             string                `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	CloudComputeService  *wrappers.StringValue `protobuf:"bytes,3,opt,name=cloud_compute_service,json=cloudComputeService,proto3" json:"cloud_compute_service,omitempty"`
	CloudType            string                `protobuf:"bytes,4,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	LocalUser            string                `protobuf:"bytes,5,opt,name=local_user,json=localUser,proto3" json:"local_user,omitempty"`
	LocalGroup           string                `protobuf:"bytes,6,opt,name=local_group,json=localGroup,proto3" json:"local_group,omitempty"`
	GlobalUserName       string                `protobuf:"bytes,7,opt,name=global_user_name,json=globalUserName,proto3" json:"global_user_name,omitempty"`
	Fqan                 string                `protobuf:"bytes,8,opt,name=fqan,proto3" json:"fqan,omitempty"`
	IpType               string                `protobuf:"bytes,9,opt,name=ip_type,json=ipType,proto3" json:"ip_type,omitempty"`
	IpCount              uint32                `protobuf:"varint,10,opt,name=ip_count,json=ipCount,proto3" json:"ip_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IpRecord) Reset()         { *m = IpRecord{} }
func (m *IpRecord) String() string { return proto.CompactTextString(m) }
func (*IpRecord) ProtoMessage()    {}
func (*IpRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_b637b8af21596263, []int{1}
}
func (m *IpRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpRecord.Unmarshal(m, b)
}
func (m *IpRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpRecord.Marshal(b, m, deterministic)
}
func (dst *IpRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpRecord.Merge(dst, src)
}
func (m *IpRecord) XXX_Size() int {
	return xxx_messageInfo_IpRecord.Size(m)
}
func (m *IpRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_IpRecord.DiscardUnknown(m)
}

var xxx_messageInfo_IpRecord proto.InternalMessageInfo

func (m *IpRecord) GetMeasurementTime() *timestamp.Timestamp {
	if m != nil {
		return m.MeasurementTime
	}
	return nil
}

func (m *IpRecord) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *IpRecord) GetCloudComputeService() *wrappers.StringValue {
	if m != nil {
		return m.CloudComputeService
	}
	return nil
}

func (m *IpRecord) GetCloudType() string {
	if m != nil {
		return m.CloudType
	}
	return ""
}

func (m *IpRecord) GetLocalUser() string {
	if m != nil {
		return m.LocalUser
	}
	return ""
}

func (m *IpRecord) GetLocalGroup() string {
	if m != nil {
		return m.LocalGroup
	}
	return ""
}

func (m *IpRecord) GetGlobalUserName() string {
	if m != nil {
		return m.GlobalUserName
	}
	return ""
}

func (m *IpRecord) GetFqan() string {
	if m != nil {
		return m.Fqan
	}
	return ""
}

func (m *IpRecord) GetIpType() string {
	if m != nil {
		return m.IpType
	}
	return ""
}

func (m *IpRecord) GetIpCount() uint32 {
	if m != nil {
		return m.IpCount
	}
	return 0
}

type StorageRecord struct {
	RecordID                  string                `protobuf:"bytes,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	CreateTime                *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StorageSystem             string                `protobuf:"bytes,3,opt,name=storage_system,json=storageSystem,proto3" json:"storage_system,omitempty"`
	Site                      *wrappers.StringValue `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	StorageShare              *wrappers.StringValue `protobuf:"bytes,5,opt,name=storage_share,json=storageShare,proto3" json:"storage_share,omitempty"`
	StorageMedia              *wrappers.StringValue `protobuf:"bytes,6,opt,name=storage_media,json=storageMedia,proto3" json:"storage_media,omitempty"`
	StorageClass              *wrappers.StringValue `protobuf:"bytes,7,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	FileCount                 *wrappers.StringValue `protobuf:"bytes,8,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	DirectoryPath             *wrappers.StringValue `protobuf:"bytes,9,opt,name=directory_path,json=directoryPath,proto3" json:"directory_path,omitempty"`
	LocalUser                 *wrappers.StringValue `protobuf:"bytes,10,opt,name=local_user,json=localUser,proto3" json:"local_user,omitempty"`
	LocalGroup                *wrappers.StringValue `protobuf:"bytes,11,opt,name=local_group,json=localGroup,proto3" json:"local_group,omitempty"`
	UserIdentity              *wrappers.StringValue `protobuf:"bytes,12,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	Group                     *wrappers.StringValue `protobuf:"bytes,13,opt,name=group,proto3" json:"group,omitempty"`
	GroupAttribute            *wrappers.StringValue `protobuf:"bytes,14,opt,name=group_attribute,json=groupAttribute,proto3" json:"group_attribute,omitempty"`
	GroupAttributeType        *wrappers.StringValue `protobuf:"bytes,15,opt,name=group_attribute_type,json=groupAttributeType,proto3" json:"group_attribute_type,omitempty"`
	StartTime                 *timestamp.Timestamp  `protobuf:"bytes,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                   *timestamp.Timestamp  `protobuf:"bytes,17,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ResourceCapacityUsed      uint64                `protobuf:"varint,18,opt,name=resource_capacity_used,json=resourceCapacityUsed,proto3" json:"resource_capacity_used,omitempty"`
	LogicalCapacityUsed       *wrappers.UInt64Value `protobuf:"bytes,19,opt,name=logical_capacity_used,json=logicalCapacityUsed,proto3" json:"logical_capacity_used,omitempty"`
	ResourceCapacityAllocated *wrappers.UInt64Value `protobuf:"bytes,20,opt,name=resource_capacity_allocated,json=resourceCapacityAllocated,proto3" json:"resource_capacity_allocated,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}              `json:"-"`
	XXX_unrecognized          []byte                `json:"-"`
	XXX_sizecache             int32                 `json:"-"`
}

func (m *StorageRecord) Reset()         { *m = StorageRecord{} }
func (m *StorageRecord) String() string { return proto.CompactTextString(m) }
func (*StorageRecord) ProtoMessage()    {}
func (*StorageRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_b637b8af21596263, []int{2}
}
func (m *StorageRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageRecord.Unmarshal(m, b)
}
func (m *StorageRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageRecord.Marshal(b, m, deterministic)
}
func (dst *StorageRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageRecord.Merge(dst, src)
}
func (m *StorageRecord) XXX_Size() int {
	return xxx_messageInfo_StorageRecord.Size(m)
}
func (m *StorageRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StorageRecord proto.InternalMessageInfo

func (m *StorageRecord) GetRecordID() string {
	if m != nil {
		return m.RecordID
	}
	return ""
}

func (m *StorageRecord) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *StorageRecord) GetStorageSystem() string {
	if m != nil {
		return m.StorageSystem
	}
	return ""
}

func (m *StorageRecord) GetSite() *wrappers.StringValue {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *StorageRecord) GetStorageShare() *wrappers.StringValue {
	if m != nil {
		return m.StorageShare
	}
	return nil
}

func (m *StorageRecord) GetStorageMedia() *wrappers.StringValue {
	if m != nil {
		return m.StorageMedia
	}
	return nil
}

func (m *StorageRecord) GetStorageClass() *wrappers.StringValue {
	if m != nil {
		return m.StorageClass
	}
	return nil
}

func (m *StorageRecord) GetFileCount() *wrappers.StringValue {
	if m != nil {
		return m.FileCount
	}
	return nil
}

func (m *StorageRecord) GetDirectoryPath() *wrappers.StringValue {
	if m != nil {
		return m.DirectoryPath
	}
	return nil
}

func (m *StorageRecord) GetLocalUser() *wrappers.StringValue {
	if m != nil {
		return m.LocalUser
	}
	return nil
}

func (m *StorageRecord) GetLocalGroup() *wrappers.StringValue {
	if m != nil {
		return m.LocalGroup
	}
	return nil
}

func (m *StorageRecord) GetUserIdentity() *wrappers.StringValue {
	if m != nil {
		return m.UserIdentity
	}
	return nil
}

func (m *StorageRecord) GetGroup() *wrappers.StringValue {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *StorageRecord) GetGroupAttribute() *wrappers.StringValue {
	if m != nil {
		return m.GroupAttribute
	}
	return nil
}

func (m *StorageRecord) GetGroupAttributeType() *wrappers.StringValue {
	if m != nil {
		return m.GroupAttributeType
	}
	return nil
}

func (m *StorageRecord) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StorageRecord) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *StorageRecord) GetResourceCapacityUsed() uint64 {
	if m != nil {
		return m.ResourceCapacityUsed
	}
	return 0
}

func (m *StorageRecord) GetLogicalCapacityUsed() *wrappers.UInt64Value {
	if m != nil {
		return m.LogicalCapacityUsed
	}
	return nil
}

func (m *StorageRecord) GetResourceCapacityAllocated() *wrappers.UInt64Value {
	if m != nil {
		return m.ResourceCapacityAllocated
	}
	return nil
}

type VmData struct {
	// Types that are valid to be assigned to Data:
	//	*VmData_Identifier
	//	*VmData_Vm
	Data                 isVmData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VmData) Reset()         { *m = VmData{} }
func (m *VmData) String() string { return proto.CompactTextString(m) }
func (*VmData) ProtoMessage()    {}
func (*VmData) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_b637b8af21596263, []int{3}
}
func (m *VmData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmData.Unmarshal(m, b)
}
func (m *VmData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmData.Marshal(b, m, deterministic)
}
func (dst *VmData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmData.Merge(dst, src)
}
func (m *VmData) XXX_Size() int {
	return xxx_messageInfo_VmData.Size(m)
}
func (m *VmData) XXX_DiscardUnknown() {
	xxx_messageInfo_VmData.DiscardUnknown(m)
}

var xxx_messageInfo_VmData proto.InternalMessageInfo

type isVmData_Data interface {
	isVmData_Data()
}

type VmData_Identifier struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type VmData_Vm struct {
	Vm *VmRecord `protobuf:"bytes,2,opt,name=vm,proto3,oneof"`
}

func (*VmData_Identifier) isVmData_Data() {}

func (*VmData_Vm) isVmData_Data() {}

func (m *VmData) GetData() isVmData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VmData) GetIdentifier() string {
	if x, ok := m.GetData().(*VmData_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (m *VmData) GetVm() *VmRecord {
	if x, ok := m.GetData().(*VmData_Vm); ok {
		return x.Vm
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VmData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VmData_OneofMarshaler, _VmData_OneofUnmarshaler, _VmData_OneofSizer, []interface{}{
		(*VmData_Identifier)(nil),
		(*VmData_Vm)(nil),
	}
}

func _VmData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VmData)
	// data
	switch x := m.Data.(type) {
	case *VmData_Identifier:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Identifier)
	case *VmData_Vm:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vm); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VmData.Data has unexpected type %T", x)
	}
	return nil
}

func _VmData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VmData)
	switch tag {
	case 1: // data.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &VmData_Identifier{x}
		return true, err
	case 2: // data.vm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmRecord)
		err := b.DecodeMessage(msg)
		m.Data = &VmData_Vm{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VmData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VmData)
	// data
	switch x := m.Data.(type) {
	case *VmData_Identifier:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Identifier)))
		n += len(x.Identifier)
	case *VmData_Vm:
		s := proto.Size(x.Vm)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IpData struct {
	// Types that are valid to be assigned to Data:
	//	*IpData_Identifier
	//	*IpData_Ip
	Data                 isIpData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IpData) Reset()         { *m = IpData{} }
func (m *IpData) String() string { return proto.CompactTextString(m) }
func (*IpData) ProtoMessage()    {}
func (*IpData) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_b637b8af21596263, []int{4}
}
func (m *IpData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpData.Unmarshal(m, b)
}
func (m *IpData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpData.Marshal(b, m, deterministic)
}
func (dst *IpData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpData.Merge(dst, src)
}
func (m *IpData) XXX_Size() int {
	return xxx_messageInfo_IpData.Size(m)
}
func (m *IpData) XXX_DiscardUnknown() {
	xxx_messageInfo_IpData.DiscardUnknown(m)
}

var xxx_messageInfo_IpData proto.InternalMessageInfo

type isIpData_Data interface {
	isIpData_Data()
}

type IpData_Identifier struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type IpData_Ip struct {
	Ip *IpRecord `protobuf:"bytes,2,opt,name=ip,proto3,oneof"`
}

func (*IpData_Identifier) isIpData_Data() {}

func (*IpData_Ip) isIpData_Data() {}

func (m *IpData) GetData() isIpData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *IpData) GetIdentifier() string {
	if x, ok := m.GetData().(*IpData_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (m *IpData) GetIp() *IpRecord {
	if x, ok := m.GetData().(*IpData_Ip); ok {
		return x.Ip
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpData_OneofMarshaler, _IpData_OneofUnmarshaler, _IpData_OneofSizer, []interface{}{
		(*IpData_Identifier)(nil),
		(*IpData_Ip)(nil),
	}
}

func _IpData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpData)
	// data
	switch x := m.Data.(type) {
	case *IpData_Identifier:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Identifier)
	case *IpData_Ip:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ip); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IpData.Data has unexpected type %T", x)
	}
	return nil
}

func _IpData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpData)
	switch tag {
	case 1: // data.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &IpData_Identifier{x}
		return true, err
	case 2: // data.ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpRecord)
		err := b.DecodeMessage(msg)
		m.Data = &IpData_Ip{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IpData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpData)
	// data
	switch x := m.Data.(type) {
	case *IpData_Identifier:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Identifier)))
		n += len(x.Identifier)
	case *IpData_Ip:
		s := proto.Size(x.Ip)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StorageData struct {
	// Types that are valid to be assigned to Data:
	//	*StorageData_Identifier
	//	*StorageData_Storage
	Data                 isStorageData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StorageData) Reset()         { *m = StorageData{} }
func (m *StorageData) String() string { return proto.CompactTextString(m) }
func (*StorageData) ProtoMessage()    {}
func (*StorageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_goat_b637b8af21596263, []int{5}
}
func (m *StorageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageData.Unmarshal(m, b)
}
func (m *StorageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageData.Marshal(b, m, deterministic)
}
func (dst *StorageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageData.Merge(dst, src)
}
func (m *StorageData) XXX_Size() int {
	return xxx_messageInfo_StorageData.Size(m)
}
func (m *StorageData) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageData.DiscardUnknown(m)
}

var xxx_messageInfo_StorageData proto.InternalMessageInfo

type isStorageData_Data interface {
	isStorageData_Data()
}

type StorageData_Identifier struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type StorageData_Storage struct {
	Storage *StorageRecord `protobuf:"bytes,2,opt,name=storage,proto3,oneof"`
}

func (*StorageData_Identifier) isStorageData_Data() {}

func (*StorageData_Storage) isStorageData_Data() {}

func (m *StorageData) GetData() isStorageData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StorageData) GetIdentifier() string {
	if x, ok := m.GetData().(*StorageData_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (m *StorageData) GetStorage() *StorageRecord {
	if x, ok := m.GetData().(*StorageData_Storage); ok {
		return x.Storage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StorageData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StorageData_OneofMarshaler, _StorageData_OneofUnmarshaler, _StorageData_OneofSizer, []interface{}{
		(*StorageData_Identifier)(nil),
		(*StorageData_Storage)(nil),
	}
}

func _StorageData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StorageData)
	// data
	switch x := m.Data.(type) {
	case *StorageData_Identifier:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Identifier)
	case *StorageData_Storage:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Storage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StorageData.Data has unexpected type %T", x)
	}
	return nil
}

func _StorageData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StorageData)
	switch tag {
	case 1: // data.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &StorageData_Identifier{x}
		return true, err
	case 2: // data.storage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StorageRecord)
		err := b.DecodeMessage(msg)
		m.Data = &StorageData_Storage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StorageData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StorageData)
	// data
	switch x := m.Data.(type) {
	case *StorageData_Identifier:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Identifier)))
		n += len(x.Identifier)
	case *StorageData_Storage:
		s := proto.Size(x.Storage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*VmRecord)(nil), "goat_grpc.VmRecord")
	proto.RegisterType((*IpRecord)(nil), "goat_grpc.IpRecord")
	proto.RegisterType((*StorageRecord)(nil), "goat_grpc.StorageRecord")
	proto.RegisterType((*VmData)(nil), "goat_grpc.VmData")
	proto.RegisterType((*IpData)(nil), "goat_grpc.IpData")
	proto.RegisterType((*StorageData)(nil), "goat_grpc.StorageData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountingServiceClient interface {
	ProcessVms(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessVmsClient, error)
	ProcessIps(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessIpsClient, error)
	ProcessStorages(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessStoragesClient, error)
}

type accountingServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountingServiceClient(cc *grpc.ClientConn) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) ProcessVms(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessVmsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountingService_serviceDesc.Streams[0], "/goat_grpc.AccountingService/ProcessVms", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessVmsClient{stream}
	return x, nil
}

type AccountingService_ProcessVmsClient interface {
	Send(*VmData) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessVmsClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessVmsClient) Send(m *VmData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessVmsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountingServiceClient) ProcessIps(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessIpsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountingService_serviceDesc.Streams[1], "/goat_grpc.AccountingService/ProcessIps", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessIpsClient{stream}
	return x, nil
}

type AccountingService_ProcessIpsClient interface {
	Send(*IpData) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessIpsClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessIpsClient) Send(m *IpData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessIpsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountingServiceClient) ProcessStorages(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessStoragesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountingService_serviceDesc.Streams[2], "/goat_grpc.AccountingService/ProcessStorages", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessStoragesClient{stream}
	return x, nil
}

type AccountingService_ProcessStoragesClient interface {
	Send(*StorageData) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessStoragesClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessStoragesClient) Send(m *StorageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessStoragesClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountingServiceServer is the server API for AccountingService service.
type AccountingServiceServer interface {
	ProcessVms(AccountingService_ProcessVmsServer) error
	ProcessIps(AccountingService_ProcessIpsServer) error
	ProcessStorages(AccountingService_ProcessStoragesServer) error
}

func RegisterAccountingServiceServer(s *grpc.Server, srv AccountingServiceServer) {
	s.RegisterService(&_AccountingService_serviceDesc, srv)
}

func _AccountingService_ProcessVms_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessVms(&accountingServiceProcessVmsServer{stream})
}

type AccountingService_ProcessVmsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*VmData, error)
	grpc.ServerStream
}

type accountingServiceProcessVmsServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessVmsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessVmsServer) Recv() (*VmData, error) {
	m := new(VmData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AccountingService_ProcessIps_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessIps(&accountingServiceProcessIpsServer{stream})
}

type AccountingService_ProcessIpsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*IpData, error)
	grpc.ServerStream
}

type accountingServiceProcessIpsServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessIpsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessIpsServer) Recv() (*IpData, error) {
	m := new(IpData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AccountingService_ProcessStorages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessStorages(&accountingServiceProcessStoragesServer{stream})
}

type AccountingService_ProcessStoragesServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*StorageData, error)
	grpc.ServerStream
}

type accountingServiceProcessStoragesServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessStoragesServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessStoragesServer) Recv() (*StorageData, error) {
	m := new(StorageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AccountingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goat_grpc.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessVms",
			Handler:       _AccountingService_ProcessVms_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessIps",
			Handler:       _AccountingService_ProcessIps_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessStorages",
			Handler:       _AccountingService_ProcessStorages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "goat.proto",
}

func init() { proto.RegisterFile("goat.proto", fileDescriptor_goat_b637b8af21596263) }

var fileDescriptor_goat_b637b8af21596263 = []byte{
	// 1216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0xed, 0x6e, 0xdb, 0x36,
	0x17, 0xc7, 0xeb, 0x34, 0xb5, 0xad, 0x63, 0x2b, 0x76, 0x98, 0x36, 0x55, 0x9c, 0xe7, 0x59, 0xb3,
	0x00, 0x05, 0xf2, 0xc9, 0x1d, 0xba, 0x6c, 0x43, 0xd1, 0xbd, 0xa5, 0x4e, 0xdb, 0xf8, 0xc3, 0xba,
	0x42, 0x69, 0x02, 0x0c, 0x18, 0x20, 0xd0, 0x12, 0xe3, 0x10, 0xd5, 0x0b, 0x47, 0x52, 0x29, 0x7c,
	0x19, 0xbb, 0xb1, 0x5d, 0xca, 0xee, 0x60, 0xc0, 0xc0, 0x17, 0xd9, 0x72, 0xbc, 0xd6, 0xc4, 0x3e,
	0xec, 0x5b, 0x42, 0x9e, 0xdf, 0x9f, 0x87, 0xe2, 0xe1, 0xf9, 0xd3, 0x00, 0xd3, 0x02, 0xcb, 0x21,
	0xe3, 0x85, 0x2c, 0x90, 0xa7, 0xfe, 0x8e, 0xa6, 0x9c, 0xc5, 0x83, 0xfd, 0x69, 0x51, 0x4c, 0x53,
	0xf2, 0x44, 0x4f, 0x4c, 0xca, 0xab, 0x27, 0x24, 0x63, 0x72, 0x66, 0xe2, 0x06, 0x8f, 0x6e, 0x4f,
	0x4a, 0x9a, 0x11, 0x21, 0x71, 0xc6, 0x6c, 0xc0, 0x67, 0xb7, 0x03, 0x92, 0x92, 0x63, 0x49, 0x8b,
	0xfc, 0x63, 0xf3, 0x1f, 0x38, 0x66, 0x8c, 0x70, 0x61, 0xe6, 0x0f, 0xff, 0xea, 0x40, 0xfb, 0x32,
	0x0b, 0x49, 0x5c, 0xf0, 0x04, 0x3d, 0x84, 0xd6, 0x4d, 0x16, 0x95, 0x25, 0x4d, 0x82, 0xc6, 0x41,
	0xe3, 0xc8, 0x0b, 0x9b, 0x37, 0xd9, 0x45, 0x49, 0x13, 0xb4, 0x0f, 0x9e, 0xa0, 0x92, 0x44, 0x39,
	0xce, 0x48, 0xb0, 0xa1, 0xa7, 0xda, 0x6a, 0xe0, 0x0d, 0xce, 0x08, 0x7a, 0x0b, 0x0f, 0xe2, 0xb4,
	0x28, 0x93, 0x28, 0x2e, 0x32, 0x56, 0x4a, 0x12, 0x09, 0xc2, 0x6f, 0x68, 0x4c, 0x82, 0xbb, 0x07,
	0x8d, 0xa3, 0xce, 0xd3, 0xff, 0x0d, 0x4d, 0x0a, 0xc3, 0x2a, 0x85, 0xe1, 0xb9, 0xe4, 0x34, 0x9f,
	0x5e, 0xe2, 0xb4, 0x24, 0xe1, 0x8e, 0x46, 0x47, 0x86, 0x3c, 0x37, 0x20, 0xfa, 0x1c, 0xba, 0x19,
	0x8e, 0xaf, 0x69, 0x6e, 0x57, 0xdc, 0xd4, 0x2b, 0x76, 0xec, 0x98, 0x5e, 0xf4, 0x47, 0xf0, 0xd3,
	0x22, 0xc6, 0x69, 0x54, 0x0a, 0xc2, 0x23, 0x9a, 0x04, 0xf7, 0x1c, 0x16, 0xeb, 0x68, 0xe4, 0x42,
	0x10, 0x3e, 0x4e, 0xd0, 0x0b, 0xd8, 0x32, 0x0a, 0x53, 0x5e, 0x94, 0x4c, 0x49, 0x34, 0x1d, 0x24,
	0xba, 0x9a, 0x79, 0xad, 0x90, 0x71, 0x82, 0x5e, 0x41, 0x7f, 0x9a, 0x16, 0x93, 0x2a, 0x0d, 0x9d,
	0x6c, 0xcb, 0x41, 0x65, 0xcb, 0x50, 0x2a, 0x13, 0xbd, 0x9b, 0x2f, 0x60, 0xf3, 0xea, 0x37, 0x9c,
	0x07, 0x6d, 0x07, 0x56, 0x47, 0xa2, 0x63, 0x68, 0x0a, 0x89, 0x65, 0x29, 0x02, 0xcf, 0x81, 0xb1,
	0xb1, 0xe8, 0x19, 0x80, 0x90, 0x98, 0xcb, 0x48, 0x95, 0x51, 0x00, 0x9a, 0x1c, 0xac, 0x90, 0xef,
	0xaa, 0x1a, 0x0b, 0x3d, 0x1d, 0xad, 0xfe, 0x47, 0x5f, 0x41, 0x9b, 0xe4, 0x89, 0x01, 0x3b, 0x6b,
	0xc1, 0x16, 0xc9, 0x13, 0x8d, 0x9d, 0x42, 0x5f, 0x94, 0x82, 0x29, 0xb4, 0xaa, 0xcc, 0xa0, 0xab,
	0xf1, 0xbd, 0x15, 0xfc, 0xd4, 0x06, 0x84, 0x3d, 0x8b, 0x54, 0x03, 0xe8, 0x7b, 0xf0, 0x3f, 0xe0,
	0x34, 0x5d, 0x48, 0xf8, 0xeb, 0x24, 0xba, 0x2a, 0x7e, 0xce, 0x7f, 0x0b, 0xdd, 0x98, 0x95, 0x0b,
	0x7c, 0x6b, 0x1d, 0xde, 0x89, 0x59, 0x39, 0xa7, 0xf7, 0xc1, 0x53, 0x74, 0x5c, 0x94, 0xb9, 0x0c,
	0x7a, 0x07, 0x8d, 0x23, 0x3f, 0x6c, 0xc7, 0xac, 0x1c, 0xa9, 0xff, 0xd1, 0x0f, 0xd0, 0xcd, 0x89,
	0xfc, 0x50, 0xf0, 0xf7, 0x91, 0x9c, 0x31, 0x12, 0xf4, 0x5d, 0xea, 0xd0, 0x12, 0xef, 0x66, 0x8c,
	0xa0, 0x97, 0xd0, 0xab, 0x04, 0x68, 0x3e, 0x29, 0xca, 0x3c, 0x09, 0xb6, 0x3f, 0xa2, 0x71, 0x31,
	0xce, 0xe5, 0xd7, 0xc7, 0xb6, 0x84, 0x2c, 0x34, 0x36, 0x0c, 0x7a, 0x0d, 0xfd, 0x4a, 0xa6, 0x28,
	0xa5, 0xd1, 0x41, 0x0e, 0x3a, 0xd5, 0xe2, 0x3f, 0x5b, 0x08, 0x9d, 0x42, 0x8f, 0x95, 0x93, 0x94,
	0xc6, 0x11, 0x65, 0x76, 0xcf, 0x3b, 0x0e, 0x3a, 0xbe, 0x81, 0xc6, 0xcc, 0x7c, 0x96, 0x63, 0x68,
	0x66, 0x24, 0x2b, 0xf8, 0x2c, 0xb8, 0xef, 0x00, 0xdb, 0x58, 0x75, 0x0f, 0x12, 0x2a, 0xde, 0x07,
	0x0f, 0x1c, 0x18, 0x1d, 0x89, 0x46, 0xb0, 0x35, 0x21, 0x79, 0x7c, 0x9d, 0xe1, 0xea, 0x00, 0x76,
	0x1d, 0x0e, 0xc0, 0x9f, 0x33, 0xfa, 0x08, 0x9e, 0x81, 0x37, 0x1f, 0x08, 0x1e, 0x6a, 0x7e, 0x7f,
	0x85, 0x7f, 0x95, 0x16, 0x58, 0x1a, 0x7c, 0x11, 0x8d, 0xce, 0x60, 0x5b, 0xc8, 0x82, 0xe3, 0x29,
	0x89, 0xb8, 0x6e, 0xa2, 0xaa, 0x91, 0x04, 0x0e, 0x29, 0xf4, 0x2c, 0x66, 0x5a, 0xef, 0x38, 0x41,
	0xdf, 0x40, 0x9b, 0x66, 0x4a, 0x87, 0x26, 0xc1, 0x9e, 0x83, 0x40, 0x4b, 0x47, 0x8f, 0x13, 0xf4,
	0x1c, 0xc0, 0xf4, 0x5f, 0xbd, 0xfd, 0x81, 0x03, 0xea, 0xe9, 0x78, 0xb5, 0xf5, 0xc3, 0xdf, 0xef,
	0x42, 0x7b, 0xcc, 0x6c, 0xff, 0x7f, 0x09, 0xfd, 0x8c, 0x60, 0x51, 0x72, 0x92, 0x91, 0xdc, 0x36,
	0x89, 0xc6, 0xda, 0xbb, 0xde, 0xab, 0x31, 0xfa, 0xce, 0xff, 0xc7, 0x6e, 0xf1, 0xff, 0xa5, 0xfd,
	0x1b, 0xaf, 0x58, 0xec, 0x50, 0x4d, 0x2f, 0x9c, 0x42, 0xdb, 0x84, 0x17, 0x7a, 0x73, 0x23, 0x40,
	0x8f, 0xa0, 0x53, 0xb3, 0x01, 0xed, 0x01, 0x5e, 0x08, 0x8b, 0x2e, 0x8f, 0x8e, 0x3e, 0xd2, 0xe3,
	0xbd, 0x95, 0x2e, 0x8e, 0x6a, 0x5d, 0xdc, 0xb3, 0x7d, 0xfa, 0x21, 0xb4, 0x28, 0x33, 0x99, 0x79,
	0xc6, 0x52, 0x29, 0xd3, 0x69, 0xed, 0x41, 0x7b, 0x7e, 0xbf, 0x40, 0xf7, 0x94, 0x16, 0x35, 0x77,
	0xe7, 0xf0, 0x4f, 0x0f, 0xfc, 0xf3, 0x7a, 0x75, 0xa0, 0x01, 0xb4, 0x4d, 0x75, 0x8d, 0x4f, 0xad,
	0x33, 0xcf, 0xff, 0x47, 0xcf, 0xa1, 0x13, 0x73, 0x82, 0x25, 0x31, 0xe7, 0xb5, 0xb1, 0xf6, 0xbc,
	0xc0, 0x84, 0xeb, 0xa3, 0x7a, 0x0c, 0x5b, 0x55, 0xf9, 0x8a, 0x99, 0x90, 0x24, 0xd3, 0xc7, 0xe0,
	0x85, 0xbe, 0x1d, 0x3d, 0xd7, 0x83, 0xea, 0x5e, 0xaa, 0x03, 0xd4, 0x1f, 0x77, 0xad, 0x3f, 0xa9,
	0x48, 0x74, 0x02, 0xfe, 0x5c, 0xf8, 0x1a, 0x73, 0xe2, 0xe4, 0xcf, 0xdd, 0x6a, 0x55, 0x45, 0xd4,
	0x25, 0x32, 0x92, 0x50, 0xec, 0xe6, 0xcf, 0x16, 0xf9, 0x49, 0x11, 0x75, 0x89, 0x38, 0xc5, 0x42,
	0x38, 0x99, 0x73, 0x25, 0x31, 0x52, 0x84, 0xba, 0x5d, 0x57, 0x34, 0x25, 0xf6, 0xa4, 0x5c, 0x0c,
	0xda, 0x53, 0xf1, 0xa6, 0x0b, 0x8e, 0x60, 0x2b, 0xa1, 0x9c, 0xc4, 0xb2, 0xe0, 0xb3, 0x88, 0x61,
	0x79, 0xed, 0xe4, 0xd6, 0xfe, 0x9c, 0x79, 0x8b, 0xe5, 0xb5, 0xca, 0xa0, 0x56, 0xc0, 0xe0, 0x92,
	0xc1, 0xa2, 0xbc, 0xbf, 0x5b, 0x2e, 0xef, 0x8e, 0x03, 0x5d, 0x2f, 0xfe, 0x13, 0xf0, 0xed, 0x03,
	0x8b, 0xe4, 0x92, 0xca, 0x99, 0xf5, 0xee, 0x35, 0x1f, 0xb0, 0xd4, 0x2f, 0x2c, 0x43, 0xa0, 0xa7,
	0x70, 0xcf, 0xac, 0xed, 0x3b, 0xa0, 0x26, 0x54, 0x79, 0xa2, 0x79, 0x95, 0x61, 0x29, 0x39, 0x9d,
	0x94, 0x92, 0x58, 0xcb, 0x5e, 0xf7, 0xac, 0x52, 0xd0, 0x49, 0xc5, 0xa0, 0x37, 0x70, 0xff, 0x96,
	0x8c, 0xb9, 0x89, 0x3d, 0x07, 0x2d, 0xb4, 0xac, 0x65, 0x7d, 0xa2, 0xfe, 0x7c, 0xea, 0xff, 0xdb,
	0xe7, 0xd3, 0xb6, 0xfb, 0xf3, 0xe9, 0x18, 0x76, 0x39, 0x11, 0x45, 0xc9, 0x63, 0x12, 0xc5, 0x98,
	0xe1, 0x98, 0xca, 0x99, 0xaa, 0x03, 0xe3, 0xed, 0x9b, 0xe1, 0xfd, 0x6a, 0x76, 0x64, 0x27, 0x2f,
	0x04, 0x49, 0x54, 0x8f, 0x4d, 0x8b, 0x29, 0x55, 0xc7, 0xbe, 0x0c, 0xb9, 0x18, 0xf9, 0x8e, 0x45,
	0x97, 0x14, 0x7f, 0x85, 0xfd, 0xd5, 0x3c, 0x70, 0xaa, 0x2a, 0x45, 0x92, 0xc4, 0xc9, 0xe3, 0xf7,
	0x6e, 0xa7, 0x7a, 0x52, 0xe1, 0x87, 0xbf, 0x40, 0xf3, 0x32, 0x3b, 0xc5, 0x12, 0xa3, 0x03, 0x00,
	0x53, 0x6a, 0x57, 0x94, 0x70, 0xd3, 0xea, 0xce, 0xee, 0x84, 0xb5, 0x31, 0xf4, 0x18, 0x36, 0x6e,
	0x32, 0xdb, 0xe5, 0x76, 0x86, 0xf3, 0x9f, 0x51, 0xc3, 0xea, 0x47, 0xcc, 0xd9, 0x9d, 0x70, 0xe3,
	0x26, 0x7b, 0xd1, 0x84, 0xcd, 0x04, 0x4b, 0xac, 0xa4, 0xc7, 0xcc, 0x5d, 0x9a, 0xb2, 0x7f, 0x90,
	0xae, 0xfc, 0x51, 0x49, 0x53, 0x36, 0x97, 0xce, 0xa0, 0x63, 0xbb, 0xb4, 0xa3, 0xfe, 0x31, 0xb4,
	0x6c, 0x6b, 0xb1, 0x8b, 0x04, 0xb5, 0x45, 0x96, 0x1a, 0xfe, 0xd9, 0x9d, 0xb0, 0x0a, 0xad, 0x96,
	0x7b, 0xfa, 0x47, 0x03, 0xb6, 0x4f, 0x62, 0xdd, 0x86, 0x68, 0x3e, 0xad, 0xcc, 0xef, 0x19, 0xc0,
	0x5b, 0x5e, 0xc4, 0x44, 0x88, 0xcb, 0x4c, 0xa0, 0xed, 0xa5, 0x0f, 0xa2, 0xd2, 0x1a, 0xec, 0xae,
	0x1c, 0xca, 0x4b, 0xf5, 0xfb, 0xf2, 0xa8, 0x51, 0x43, 0xc7, 0x6c, 0x19, 0x35, 0x5f, 0xec, 0x13,
	0xe8, 0x08, 0x7a, 0x16, 0xb5, 0x69, 0x0b, 0xb4, 0xbb, 0xba, 0x97, 0x4f, 0x8b, 0x4c, 0x9a, 0x7a,
	0xe4, 0xcb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x83, 0xc3, 0xec, 0x0d, 0x18, 0x0f, 0x00, 0x00,
}
