// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goat_proto_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingServiceClient interface {
	ProcessVms(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessVmsClient, error)
	ProcessIps(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessIpsClient, error)
	ProcessStorages(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessStoragesClient, error)
	ProcessGPUs(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessGPUsClient, error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) ProcessVms(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessVmsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountingService_ServiceDesc.Streams[0], "/goat_grpc.AccountingService/ProcessVms", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessVmsClient{stream}
	return x, nil
}

type AccountingService_ProcessVmsClient interface {
	Send(*VmData) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessVmsClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessVmsClient) Send(m *VmData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessVmsClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountingServiceClient) ProcessIps(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessIpsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountingService_ServiceDesc.Streams[1], "/goat_grpc.AccountingService/ProcessIps", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessIpsClient{stream}
	return x, nil
}

type AccountingService_ProcessIpsClient interface {
	Send(*IpData) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessIpsClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessIpsClient) Send(m *IpData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessIpsClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountingServiceClient) ProcessStorages(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessStoragesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountingService_ServiceDesc.Streams[2], "/goat_grpc.AccountingService/ProcessStorages", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessStoragesClient{stream}
	return x, nil
}

type AccountingService_ProcessStoragesClient interface {
	Send(*StorageData) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessStoragesClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessStoragesClient) Send(m *StorageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessStoragesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountingServiceClient) ProcessGPUs(ctx context.Context, opts ...grpc.CallOption) (AccountingService_ProcessGPUsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountingService_ServiceDesc.Streams[3], "/goat_grpc.AccountingService/ProcessGPUs", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountingServiceProcessGPUsClient{stream}
	return x, nil
}

type AccountingService_ProcessGPUsClient interface {
	Send(*GPUData) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type accountingServiceProcessGPUsClient struct {
	grpc.ClientStream
}

func (x *accountingServiceProcessGPUsClient) Send(m *GPUData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountingServiceProcessGPUsClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility
type AccountingServiceServer interface {
	ProcessVms(AccountingService_ProcessVmsServer) error
	ProcessIps(AccountingService_ProcessIpsServer) error
	ProcessStorages(AccountingService_ProcessStoragesServer) error
	ProcessGPUs(AccountingService_ProcessGPUsServer) error
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountingServiceServer struct {
}

func (UnimplementedAccountingServiceServer) ProcessVms(AccountingService_ProcessVmsServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessVms not implemented")
}
func (UnimplementedAccountingServiceServer) ProcessIps(AccountingService_ProcessIpsServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessIps not implemented")
}
func (UnimplementedAccountingServiceServer) ProcessStorages(AccountingService_ProcessStoragesServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStorages not implemented")
}
func (UnimplementedAccountingServiceServer) ProcessGPUs(AccountingService_ProcessGPUsServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessGPUs not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_ProcessVms_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessVms(&accountingServiceProcessVmsServer{stream})
}

type AccountingService_ProcessVmsServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*VmData, error)
	grpc.ServerStream
}

type accountingServiceProcessVmsServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessVmsServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessVmsServer) Recv() (*VmData, error) {
	m := new(VmData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AccountingService_ProcessIps_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessIps(&accountingServiceProcessIpsServer{stream})
}

type AccountingService_ProcessIpsServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*IpData, error)
	grpc.ServerStream
}

type accountingServiceProcessIpsServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessIpsServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessIpsServer) Recv() (*IpData, error) {
	m := new(IpData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AccountingService_ProcessStorages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessStorages(&accountingServiceProcessStoragesServer{stream})
}

type AccountingService_ProcessStoragesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*StorageData, error)
	grpc.ServerStream
}

type accountingServiceProcessStoragesServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessStoragesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessStoragesServer) Recv() (*StorageData, error) {
	m := new(StorageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AccountingService_ProcessGPUs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountingServiceServer).ProcessGPUs(&accountingServiceProcessGPUsServer{stream})
}

type AccountingService_ProcessGPUsServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*GPUData, error)
	grpc.ServerStream
}

type accountingServiceProcessGPUsServer struct {
	grpc.ServerStream
}

func (x *accountingServiceProcessGPUsServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountingServiceProcessGPUsServer) Recv() (*GPUData, error) {
	m := new(GPUData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goat_grpc.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessVms",
			Handler:       _AccountingService_ProcessVms_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessIps",
			Handler:       _AccountingService_ProcessIps_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessStorages",
			Handler:       _AccountingService_ProcessStorages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessGPUs",
			Handler:       _AccountingService_ProcessGPUs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "goat.proto",
}
